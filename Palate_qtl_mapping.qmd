---
title: "Genetic characterization of the developmental kinetics of secondary palate morphogenesis and midfacial outgrowth"
author: "Selcan Aydin"
date: "`r Sys.Date()`"
format: 
  html:
      embed-resources: true
      standalone: true
include-in-header:
  - text: |
      <style>
      .panel-tabset > .nav-tabs,
      .panel-tabset > .tab-content {
        border: none;
      }
      </style>
code-fold: true
toc: true
editor: 
  markdown: 
    wrap: sentence
---

```{r setup}
#| message: false
#| warning: false

# load packages
library(tidyverse)
library(Hmisc)
library(ppcor)

library(pheatmap)
library(plotly)
library(GGally)
library(ggpubr)
library(ggplot2)
library(corrplot)

library(gprofiler2)
set_base_url("https://biit.cs.ut.ee/gprofiler_archive3/e108_eg55_p17/")
library(WGCNA)
library(simplifyEnrichment)

library(qtl2)
library(intermediate)

library(DT)

library(here)

select <- dplyr::select # I am adding this explicitly
rename <- dplyr::rename # I am adding this explicitly
filter <- dplyr::filter # I am adding this explicitly
summarize <- dplyr::summarize # I am adding this explicitly
# functions

# rankZ
rankZ <- function (x) {
  x <- rank(x, na.last = "keep", ties.method = "average")/(sum(!is.na(x)) + 1)
  qnorm(x)
}

create_dt <- function(x){
  DT::datatable(x,
                extensions = 'Buttons',
                rownames = FALSE, 
                filter="top",
                options = list(dom = 'Blfrtip',
                               buttons = c('copy', 'csv', 'excel'),
                               pageLength = 5, 
                               scrollX= TRUE
                               ))
  
}

interp_bp <- function(df) {
  chroms <- c(as.character(1:19), "X")
  df <- arrange(df, peak_chr, peak_cM)
  peak_gpos <- select(df, peak_chr, peak_cM)
  chr <- peak_gpos$peak_chr
  f <- factor(chr, chroms)
  peak_gcoord_list <- split(peak_gpos$peak_cM, f)
  peak_pcoord_list <- qtl2::interp_map(peak_gcoord_list, gmap, pmap)
  df$interp_bp_peak <- unsplit(peak_pcoord_list, f)
  df
}

# Running mediation locally for transbands
do_global_mediation <- function(gene.name,p.chr, peak.info, probs, expr.target, expr.mediator, covar, genes){
  
  gene <- filter(peak.info, symbol==gene.name & peak_chr==p.chr)[1,]
  if(dim(gene)[1] >1){ print("check the peaks!")}
  meds <- genes 
  meds <- meds[meds$gene_id %in% colnames(expr.mediator),]    
  mediator <- expr.mediator[ ,meds$gene_id, drop=FALSE ]
  target   <- expr.target[ ,gene$gene_id,drop=FALSE ]
  marker   <- map_dat2 %>% filter(pos_cM == gene$peak_cM)
  annot    <- meds %>% mutate(chr=chromosome,pos=abs(end+start)/2)
  geno     <- pull_genoprobpos(probs,marker$marker)

  med.scan <- mediation.scan(target= target,
                            mediator = mediator,
                            annotation = annot,
                            covar =  covar,
                            qtl.geno = geno, verbose=FALSE) 
  med.scan <- med.scan %>% 
    select(-chr) %>% 
    mutate(target   = gene.name,
           peak_chr = p.chr) %>% 
    left_join(.,genes) %>% 
    rename("mediator"="symbol")
  return(med.scan)
}

# domain colors
domain_colors <- c(MAX=rgb(163,82,157, maxColorValue = 255), 
                   POST=rgb(158,156,201, maxColorValue = 255),
                   PM=rgb(252,206,93, maxColorValue = 255))

# strain colors
strain_colors <- c( B6 = "#555555", 
                    CAST = "#009E73",
                    DO = rgb(163,82,157, maxColorValue = 255))

# founder colors
founder_colors <- c(AJ = "#F0E442", B6 = "#555555", `129` = "#E69F00", NOD = "#0072B2",
   NZO = "#56B4E9", CAST = "#009E73", PWK = "#D55E00", WSB = "#CC79A7")

```

```{r load_data}
#| message: false
#| warning: false

# reading in the sample details + some phenotypes
sample_details <- readr::read_csv("/projects/munger-lab/projects/palate-project-murray-munger/samplesheet.csv") 
# remove contaminated samples then filter for only DO@13.5
contam_samples <- c("B6_12.5_PM_1","B6_13.5_POST_3", "CAST_14.5_MAX_7", "DO_13.5_MAX_6", "DO_13.5_MAX_14", "DO_13.5_MAX_14_2", "B6_13.5_MAX_3")

sample_annot <- sample_details %>% 
  filter( !sample %in% contam_samples) %>% 
  separate(Strain_stock, into = c("strain","tmp"), remove = F, sep = "_") %>% 
  filter( strain =="DO") %>% 
  filter(!( strain =="DO" & Gest_stage == "E12.5") )  |> 
  mutate( LB_stage_binned = case_when(
    ( LB_stage < 13 )~"1",
    #(between(LB_stage, 12.5, 13))~"1",
    (between(LB_stage, 13,13.5))~"2",
    (between(LB_stage, 13.5, 14))~"3",
    (between(LB_stage, 14, 14.5))~"4",
    (between(LB_stage, 14.5, 15))~"5",
    (between(LB_stage, 15, 15.5))~"6"
  ))

# sample_annot |>
#   mutate( LB_stage_binned = case_when(
#     ( LB_stage < 13 )~"1",
#     #(between(LB_stage, 12.5, 13))~"1",
#     (between(LB_stage, 13,13.5))~"2",
#     (between(LB_stage, 13.5, 14))~"3",
#     (between(LB_stage, 14, 14.5))~"4",
#     (between(LB_stage, 14.5, 15))~"5",
#     (between(LB_stage, 15, 15.5))~"6"
#   ))
#   mutate( LB_stage_binned = as_factor(LB_stage_binned)) |>
#   #dplyr::count(new_bin, strain)
#   ggplot()+
#   aes(x = LB_stage,
#       y = Gest_stage,
#       col = LB_stage_binned,
#       shape = strain)+
#   #geom_point()+
#   geom_jitter(size = 3, alpha = .7)+
#   #scale_color_manual(values = strain_colors)+
#   color_palette("Dark2")+
#   ggtitle("Bin = 0.5 day")+
#   ylab("Gestational Stage")+
#   labs( color = "Bins", shape = "Strain")+
#   scale_x_continuous( name = "LB stage",
#                     #breaks = c(12,12.25,12.75, 13.5, 14,14.25, 14.75, 15.1, 15.6, 16)
#                     breaks = seq(from = 12, to =17, by = 0.25)
#                     )+
#   theme_pubclean(flip = TRUE)


# reading in gene annotations
# Get v84 gene annotations
# all.genes_v84 <- batchGenes( ids = rownames(expr_mat), species = 'Mm', release = 84)
# # Let's save these so I don't have to depend on ensimplR every time
# write_tsv(all.genes_v84, file = here("_data","ENSMUSGid_to_symbol_v84.txt"))
all.genes_v84 <- read_tsv( here("_data","ENSMUSGid_to_symbol_v84.txt"))
all.genes_v84 <- all.genes_v84 %>%  
  mutate( midpoint = (start+end)/2)

# load data used in mapping
load(here("../qtl_mapping/DO_Palate_eQTL_forMapping_v2.RData")) # expr, exprZ, genoprobs ..etc.

# load eQTL peaks lod > 5
# load(here("../qtl_mapping/DO_Palate_paired_eQTL_peaks.RData")) # peaks
# don't need the one above since the effects has the peaks as well.

# load eQTL peak effects lod >7
load(here("../qtl_mapping/DO_Palate_eQTL_effs_lod7_v2.RData")) # effects_blup, effects_std, peaks


# There are 5 genes with mean abundance ~0, not sure why they stayed here! But let's remove them
low_genes <- expr %>%
  t() %>% 
  as_tibble(.) %>%
  summarise_all(list(~ mean(., na.rm = T))) %>%
  t() %>%
  as.data.frame() %>%
  rownames_to_column() %>%
  rename(gene_id = rowname, mean = V1) %>%
  filter( mean < 0.01)

expr <- expr[!rownames(expr) %in% low_genes$gene_id,,drop=F]
exprZ <- exprZ[,!colnames(exprZ) %in% low_genes$gene_id, drop =F]


# get all genes found in the data set
all_genes_palate <- all.genes_v84 %>% 
  filter(gene_id %in% rownames(expr))

# Genes from Ian:
pheno_gene_list <- readxl::read_xlsx(here("_data","Supp6_BoneGeneList.xlsx")) |> 
  select( symbol = gene_name) |> 
  distinct() |> 
  mutate(type = "pheno", type_long = "bone phenotype gene list (Sabik et al 2020, Table S6)")

skeletal_gene_table <- readxl::read_xlsx(here("_data","Skeletal_stem_progenitor_markers.xlsx")) |> 
  dplyr::rename("symbol" = "gene") |> 
  mutate(type = "MSC", type_long = "MSC/skeletal progenitor markers")

figure_genes <- c(MSC =c("Axin2","Gli1","Meis2","Lepr","Prrx1"),
           skeletal = c("Sox9","Runx2","Sp7","Nfatc1","Bcl11b","Msx2","Msx1","Egr1","Egr2"),
           osteoclast = c("Spi1","Tnfsf11","Tnfrsf11","PParg","Fos","Junb","Csf1","Csf1r","Ostf1",
                          "Acp5","Mmp9","Ctsk","Timp1","Atp6v0d2","Adgre1","Sfrp4","Dcstamp","Ocstamp","Htra1","Tcirg1","Itgb3","Gnptab"),
           osteoblast = c("Alpl","Ibsp","Phospho1","Vdr","Sparc","Panx3","Enpp1","Bglap","Bglap2","Clecl11a","Sost","Dmp1","Col1a1","Col1a2","Bgn","Dcn","Thbs2")
           
           ) |> 
  as_tibble(rownames = "type" ) |> 
  rename( symbol = value  ) |> 
  mutate(type = gsub("[0-9]","",type)) |> 
  mutate( type_long = case_when(type =="MSC"~"MSC/skeletal progenitor markers",
                                type =="skeletal"~"Skeletal speciation markers",
                                type =="osteoclast"~"Osteoclast markers",
                                type =="osteoblast"~"osteoblast/osteocyte markers"
                                )) 

morpho_genes <- readxl::read_xlsx(path = here("_data","abnormal craniofacial morphology-MGIBatchReport.xlsx")) |> 
  select(symbol = Symbol, mgi_id = `MGI Gene/Marker ID`, gene_biotype = `Feature Type`) 

# add gene names to MGI ids for genes
# checked the overlap
# length(intersect(mgi_id_annots$symbol, all_genes_palate$symbol)) # 16958/17146
# most of the missing ones are RPXX-YY genes or Gms
mgi_id_annots <- read_delim( file = here("_data","MRK_List1.rpt"),
                             #MGI Marker Accession ID	Chromosome	cM Position	Genome Coordinate Start	Genome Coordinate End	Genome Strand	Marker Symbol	Status	Marker Name	Marker Type	Feature Types (|-delimted)	Marker Synonyms (|-delimited)
                             col_names = c("mgi_id",
                                           "chromosome",
                                           "pos_cM",
                                           "start",
                                           "end",
                                           "strand",
                                           "symbol",
                                           "status",
                                           "marker_name",
                                           "marker_type",
                                           "feature_types",
                                           "marker_synms"), skip = 1) 

# getting the gene list for mammalian phenotypes
mp_genes <- read_delim( file = here("_data","MGI_PhenoGenoMP.rpt"),
                        # Allelic Composition	Allele Symbol(s)	Genetic Background	Mammalian Phenotype ID	PubMed ID	MGI Marker Accession ID (comma-delimited)
                        col_names = c("allelic_comp",
                                      "allele_symbol",
                                      "genetic_background",
                                      "mp_id",
                                      "pubmed_id",
                                      "mgi_id")) |> 
  select(mp_id, mgi_id) |> 
  distinct() |> 
  separate_longer_delim( mgi_id, delim = "|") |> 
  left_join(mgi_id_annots |> 
              select(mgi_id, symbol)) 
# add mammalian phenotype definitions
mp_defs <- read_delim( file = here("_data","VOC_MammalianPhenotype.rpt"),
                       col_names = c("mp_id","term_name","term_details")) 



# # This is dirtier than I thought so I am leaving it as is! We are not gaining a lot of genes from this to make this worth my time. 
# # I want to add all the synonoms to mgi ids
# mgi_id_annots_all <- mgi_id_annots |> 
#   filter( !is.na(marker_synms)) |> 
#   select( mgi_id, marker_synms) |> 
#   separate_longer_delim( marker_synms, delim = "|") |> 
#   rename( symbol = marker_synms) |> 
#   filter( !symbol %in% (mgi_id_annots |> 
#                           filter(is.na(marker_synms)))$marker_symbol ) |> # there are some synonoms with an identical gene name to others! ex:H19 & Igs40. I assume those are old and incorrect
#   rbind(
#     mgi_id_annots |> 
#       select(mgi_id, symbol = marker_symbol)
#   ) |> 
#   distinct()



# load and
# some stuff for plotting:
uchr <- c(as.character(1:19), "X")
cl <- dplyr::select(map_dat2, chr, pos_bp) %>% 
  group_by(chr) %>%
  summarize(len=max(pos_bp))
clp <- with(cl, setNames(len, chr))
chrom_lens <- setNames(as.numeric(clp[uchr]), uchr)
chrom_lens_offset <- cumsum(chrom_lens) - chrom_lens
chrom_lens_midpt <- chrom_lens_offset + chrom_lens/2


# annotate peaks
peaks_annotated <- peaks %>% 
  cbind(effects_blup) %>% # add effects
  rename( gene_id = phenotype) %>% 
  filter( !gene_id %in% low_genes$gene_id) %>% 
  left_join( ., all_genes_palate) %>% # add gene information
  mutate( same_chrom = (peak_chr ==chromosome ),
          bp_diff = abs(interp_bp_peak - midpoint)) %>% 
  mutate( local = ifelse(
    same_chrom ==FALSE, FALSE, ifelse( bp_diff < 10e06, TRUE , FALSE)
  ) ) # add local/distant


## adding cc_variants for association mapping
query_variants <- create_variant_query_func(here("_data/cc_variants.sqlite"))
query_genes <- create_gene_query_func("_data/mouse_genes_mgi.sqlite")

```


# Variation in gene expression in maxilla domain of E13.5 embryos

There are `r formatC(nrow(all_genes_palate),big.mark=",")` genes measured across `r ncol(expr)` samples. As it can be seen below (first tab), the maxilla transcriptomes show variation across samples with similar distributions in males and females.At the gene level, we observe higher variance for genes with a higher mean abundance similar to previous DO studies. I performed principal component analysis (PC) to investigate the sources of variation observed in gene expression. First PC explains 15% of variation where its drivers are overrepresented for genes involved in extracellular matrix organization, G protein-coupled receptor signaling, muscle and bone development and targets of the SRF transcription factor. Second PC explains 13% of variation and its drivers are overrepresented in genes involved in striated muscle contraction. Although the third PC groups samples by sex and accounts for 6% of the variation in gene expression, there are only 20 genes that show a significant sex effect and all of them are on the sex chromosomes except for *Rmi1*.

To further study how differences in gene expression are related to the differences in phenotypic traits such as LB stage and palate closure I used gene set variation analysis (GSVA). GSVA summarizes gene sets into enrichment scores, read out of activity (expression), for each sample which allows comparison across different groups. I compared the enrichment scores between embryos across LB stage bins and embryos with a variety palate closure phenotypes. 

Still to add: **GSVA ORA summary, GSVA QTL mapping results above and WGCNA results summary paragraph below.**

::: panel-tabset

## Overview

```{r expr_var}
#| warning: false
#| message: false

var.palate <- expr %>% 
  t() %>% 
  as_tibble(.) %>%
  summarise_all(list(~ var(., na.rm = T))) %>%
  t() %>%
  as.data.frame() %>%
  rownames_to_column() %>%
  rename(gene_id = rowname, var = V1) %>%
  arrange(desc(var))

n.palate <- expr %>%
  t() %>% 
  as_tibble(.) %>%
  summarise_all(list(~ sum(!is.na(.)))) %>%
  t() %>%
  as.data.frame() %>%
  rownames_to_column() %>%
  rename(gene_id = rowname, n = V1) %>%
  arrange(desc(n))

mean.palate <- expr %>%
  t() %>% 
  as_tibble(.) %>%
  summarise_all(list(~ mean(., na.rm = T))) %>%
  t() %>%
  as.data.frame() %>%
  rownames_to_column() %>%
  rename(gene_id = rowname, mean = V1) %>%
  arrange(desc(mean))

var.palate <- inner_join(var.palate, mean.palate) %>%
  inner_join(., n.palate) %>%
  left_join(., select(all_genes_palate, gene_id, symbol, chromosome)) %>%
  mutate(sd = sqrt(var)) %>%
  mutate(cv.palate = 100 * sd / (mean)) %>%
  rename(mean.palate = mean, sd.palate = sd, n.palate=n, var.palate=var)

# npc stats per sample
var_per_sample <- expr %>% 
  as_tibble( rownames = "gene_id") %>%
  summarise( across( where(is.numeric),  var , na.rm=T )) %>% 
  pivot_longer( 1:ncol(.), names_to = "sample", values_to ="var_sample") %>% 
  left_join( select(covarTidy, sample, sex))
  

mean_per_sample <- expr %>%
  as_tibble( rownames = "gene_id") %>%
  summarise( across( where(is.numeric),  mean , na.rm=T )) %>% 
  pivot_longer( 1:ncol(.), names_to = "sample", values_to ="mean_sample") %>% 
  left_join( select(covarTidy, sample, sex))


```

Here are the distributions of mean and variation of the DO line transcriptomes.

```{r var_plots_per_sample}
#| warning: false
#| message: false
#| fig-width: 16
#| fig-height: 4

var_per_sample %>% 
  ggplot() +
  aes(x = var_sample, col = sex, fill =sex) +
  geom_histogram(bins = 50 ) +
  xlab("Variance") +
  theme_pubclean(base_size = 14)+
  scale_x_log10()+
  color_palette("npg")+
  fill_palette("npg") -> p.var_sample.hist

mean_per_sample %>% 
  ggplot() +
  aes(x = mean_sample, col = sex, fill =sex) +
  geom_histogram(bins = 50 ) +
  xlab("Mean") +
  theme_pubclean(base_size = 14)+
  scale_x_log10()+
  color_palette("npg")+
  fill_palette("npg") -> p.mean_sample.hist

full_join(var_per_sample, mean_per_sample) %>% 
  mutate(cv_sample = 100*(sqrt(var_sample))/mean_sample) %>%
  ggscatter(
    .,
  x = "mean_sample", y = "var_sample", size = 3, alpha = 0.6,
  add = "reg.line", # Add regression line
  conf.int = TRUE, # Add confidence interval
  col = "sex",
  add.params = list(color = "blue", fill = "lightgray"),
  show.legend.text = FALSE
  #yscale = "log10", xscale = "log10"
) +
  #stat_cor(method = "pearson", label.x = 10, label.y = 21) + # Add correlation coefficient
  xlab("Mean per sample") +
  ylab("Variance per sample") +
  theme_pubclean(base_size = 14) +
  color_palette("npg")+
  fill_palette("npg")+
  facet_wrap(~sex)+
  theme(
  strip.background = element_blank(),
  strip.text.x = element_blank()
  )-> p.var.mean_sample

ggarrange( p.mean_sample.hist, p.var_sample.hist,  p.var.mean_sample, nrow = 1, widths = c(0.5,0.5,1))

```

Below are the distributions of mean and variation of individual transcripts across DO lines.

```{r var_plots_per_gene}
#| warning: false
#| message: false
#| fig-width: 14
#| fig-height: 4

var.palate %>%
  ggplot() +
  aes(x = mean.palate) +
  geom_histogram(bins = 200) +
  xlab("Mean") +
  theme_pubclean(base_size = 14)+
  scale_x_log10() -> p.mean.hist

var.palate %>%
  ggplot() +
  aes(x = var.palate) +
  geom_histogram(bins = 200 ) +
  xlab("Variance") +
  theme_pubclean(base_size = 14)+
  scale_x_log10()  -> p.var.hist

var.palate %>%
  ggplot() +
  aes(x = cv.palate) +
  geom_histogram(bins = 200 ) +
  xlab("% Coefficient of variation") +
  theme_pubclean(base_size = 14)+
  scale_x_log10()  -> p.cv.hist

ggscatter(var.palate,
  x = "mean.palate", y = "var.palate", size = 3, alpha = 0.6,
  add = "reg.line", # Add regression line
  conf.int = TRUE, # Add confidence interval
  add.params = list(color = "blue", fill = "lightgray"), show.legend.text = FALSE,
  yscale = "log10", xscale = "log10"
) +
  stat_cor(method = "pearson", label.x = 0, label.y = 11) + # Add correlation coefficient
  xlab("Mean") +
  ylab("Variance") +
  theme_pubclean(base_size = 14) +
  rremove("legend") -> p.var.mean

ggarrange( p.mean.hist, p.var.hist, p.var.mean, nrow = 1)

```

## Genes with high & low variation

```{r var_genes}
#| message: false
#| warning: false

high_var_genes <- var.palate |> 
  filter( cv.palate >= quantile(cv.palate, 0.95) )

low_var_genes <- var.palate |> 
  filter( cv.palate <= quantile(cv.palate, 0.05) )

g.high.var <- gost(
  query = high_var_genes$symbol,
  organism = "mmusculus",
  domain_scope = "custom",
  custom_bg = all_genes_palate$symbol,
  evcodes = TRUE,
  correction_method = "fdr"
)
g.high.var$result <- g.high.var$result %>% filter(term_size < 660)

g.low.var <- gost(
  query = low_var_genes$symbol,
  organism = "mmusculus",
  domain_scope = "custom",
  custom_bg = all_genes_palate$symbol,
  evcodes = TRUE,
  correction_method = "fdr"
)
g.low.var$result <- g.low.var$result %>% filter(term_size < 660)

  
```

```{r var_genes_ora}
#| warning: false
#| message: false


g.high.var$result %>% 
  mutate( Type = "High variation") %>% 
  select( Type, term_name, source, FDR = p_value, term_size, intersection_size,intersection) %>%  # intersecion: adding the list of genes identified as overlapping with each category
  filter( FDR <0.01) %>% 
  rbind(
    g.low.var$result %>% 
  mutate( Type = "Low variation") %>% 
  select( Type, term_name, source, FDR = p_value, term_size, intersection_size,intersection) %>% 
    filter( FDR <0.01) 
  ) %>% 
  mutate_if( is.numeric, formatC, digits =2) %>% 
  create_dt()

```

## Principal component analysis

```{r do_pca}
#| warning: false
#| message: false


pca <- prcomp( t(log1p(expr)), center = T, scale. = F)


pca_df <- as_tibble(pca$x, rownames = "sample") %>% 
  left_join(sample_annot)

var_explained <- (pca$sdev^2 / sum(pca$sdev^2))

```

```{r scree_plot}
#| message: false
#| warning: false
#| fig-width: 5
#| fig-height: 4
#| eval: false  

tibble(var =  var_explained[1:10]* 100, PC = paste0("PC", seq(1:10))) %>%
  arrange(desc(var)) %>%
  mutate(label = factor(PC, levels = PC)) %>%
  ggplot(aes(x = label, y = var)) +
  geom_col() +
  xlab("Principal Component") +
  ylab("% Variation explained") +
  theme_pubclean(base_size = 14)+
  ylim(0,15)


```

```{r first_ten_pcs_sex}
#| eval: false
#| message: false
#| warning: false
#| fig-width: 14
#| fig-height: 14

pca$x %>%
  as_tibble(rownames = "sample") %>% 
  left_join(sample_annot) %>%
  ggpairs(.,
    columns = 2:11, progress = FALSE, ggplot2::aes(color =LB_stage),
    upper = list(continuous = "density", combo = "box_no_facet"),
    lower = list(continuous = "points", combo = "dot_no_facet")
  ) + 
  theme_pubclean(base_size = 14) +
  # scale_color_manual( values = strain_colors)+
  # scale_fill_manual( values = strain_colors)+
  scale_color_viridis_c()+
  scale_fill_viridis_c()+
  #color_palette("npg")+
  #fill_palette("npg")+
  theme(legend.position = "right")

```

```{r pc123_3dplot}
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 6

fig <- plot_ly(pca_df, 
               x = ~PC1, 
               y = ~PC2, 
               z = ~PC3,
               symbol = ~sex,
               # symbol = ~strain,
               symbols = c("circle","square"),
               text = ~sample,
               color = ~LB_stage,
               colors = viridisLite::viridis(100,begin = 0, end = 1, direction = -1, option = "D"),
               mode = "markers",
               type = "scatter3d"
)
fig <- fig %>% 
  layout(scene = list(xaxis = list(title = paste0("PC1 (",100*round(var_explained[1],2),"%)")),
                                   yaxis = list(title = paste0("PC2 (",100*round(var_explained[2],2),"%)")),
                                   zaxis = list(title = paste0("PC3 (",100*round(var_explained[3],2),"%)")))
)

fig

```


```{r pc1_pc2_plot}
#| warning: false
#| message: false

pca_df |> 
  ggplot()+
  aes( x= PC1,
       y = PC2,
       col = LB_stage,
       shape = sex)+
  geom_point( size = 3, alpha = 0.7)+
  scale_color_viridis_c(option = "D", direction = -1)+
  theme_pubclean()+
  xlab( paste0("PC1 (",100*round(var_explained[1],2),"%)"))+
  ylab( paste0("PC2 (",100*round(var_explained[2],2),"%)"))+
  scale_shape_manual(values = c("circle","square"))
  
  

```

<!-- Sample highlights: -->

<!-- ```{r pca_highlight_3dplot} -->
<!-- #| message: false -->
<!-- #| warning: false -->
<!-- #| fig-width: 8 -->
<!-- #| fig-height: 6 -->

<!-- samples <- c("DO_13.5_MAX_16", -->
<!--                        "DO_13.5_MAX_38", -->
<!--                        "DO_13.5_MAX_46", -->
<!--                        "DO_13.5_MAX_47", -->
<!--                        "DO_13.5_MAX_80", -->
<!--                        "DO_13.5_MAX_83", -->
<!--                        "DO_13.5_MAX_89") -->

<!-- pca_df_highlight <- pca_df |> -->
<!--   mutate( label = ifelse( sample %in% samples, "Yes", "No")) -->

<!-- fig <- plot_ly(pca_df_highlight, -->
<!--                x = ~PC1, -->
<!--                y = ~PC2, -->
<!--                z = ~PC5, -->
<!--                # symbol = ~strain, -->
<!--                # symbols = c("circle","diamond","square"), -->
<!--                text = ~sample, -->
<!--                color = ~label, -->
<!--                mode = "markers", -->
<!--                type = "scatter3d" -->
<!-- ) -->
<!-- fig <- fig %>% -->
<!--   layout(scene = list(xaxis = list(title = paste0("PC1 (",100*round(var_explained[1],2),"%)")), -->
<!--                                    yaxis = list(title = paste0("PC2 (",100*round(var_explained[2],2),"%)")), -->
<!--                                    zaxis = list(title = paste0("PC5 (",100*round(var_explained[5],2),"%)"))) -->
<!-- ) -->

<!-- fig -->

<!-- ``` -->

<!-- ```{r pca_highlights_pairs} -->


<!-- pca$x %>% -->
<!--   as_tibble(rownames = "sample") %>% -->
<!--   left_join(sample_annot) %>% -->
<!--   mutate( label = ifelse( sample %in% samples, "Yes", "No")) |> -->
<!--   ggpairs( -->
<!--     columns = 2:6, progress = FALSE, ggplot2::aes(color =label), -->
<!--     upper = list(continuous = "density", combo = "box_no_facet"), -->
<!--     lower = list(continuous = "points", combo = "dot_no_facet") -->
<!--   ) + -->
<!--   theme_pubclean(base_size = 14) + -->
<!--   # scale_color_manual( values = strain_colors)+ -->
<!--   # scale_fill_manual( values = strain_colors)+ -->
<!--   # scale_color_viridis_d()+ -->
<!--   # scale_fill_viridis_d()+ -->
<!--   color_palette("npg")+ -->
<!--   fill_palette("npg")+ -->
<!--   theme(legend.position = "right") -->


<!-- ``` -->

<!-- CLustering of samples based on PC1 and PC2: -->
<!-- ```{r pc1_pc2_cluster} -->
<!-- clust <- kmeans( pca$x[,c(1,2),drop=F], centers = 2) -->

<!-- pca_df |>  -->
<!--   left_join(enframe(clust$cluster), by = c("sample"="name")) |>  -->
<!--   rename(cluster= value) |>  -->
<!--   ggplot()+ -->
<!--   aes( -->
<!--     x = PC1, -->
<!--     y = PC2, -->
<!--     col = as.factor(cluster) -->
<!--   )+ -->
<!--   geom_point()+ -->
<!--   theme_pubclean() -->

<!-- ``` -->

What biological processes and pathway are overrepresented in drivers of PC1 and PC2?

```{r ora_pca}
#| warning: false
#| message: false


# pc drivers
pc1_drivers <- pca$rotation[,"PC1", drop = FALSE] %>% 
  as_tibble( rownames = "id") %>% 
  left_join( all_genes_palate %>%  
               select(id, symbol)
             ) %>% 
  filter( abs(PC1) >= quantile(abs(PC1), 0.95))

pc2_drivers <- pca$rotation[,"PC2", drop = FALSE] %>% 
  as_tibble( rownames = "id") %>% 
  left_join( all_genes_palate %>%  
               select(id, symbol)
             ) %>% 
  filter( abs(PC2) >= quantile(abs(PC2), 0.95))

pc3_drivers <- pca$rotation[,"PC3", drop = FALSE] %>% 
  as_tibble( rownames = "id") %>% 
  left_join( all_genes_palate %>%  
               select(id, symbol)
             ) %>% 
  filter( abs(PC3) >= quantile(abs(PC3), 0.95))

pc4_drivers <- pca$rotation[,"PC4", drop = FALSE] %>% 
  as_tibble( rownames = "id") %>% 
  left_join( all_genes_palate %>%  
               select(id, symbol)
             ) %>% 
  filter( abs(PC4) >= quantile(abs(PC4), 0.95))

pc5_drivers <- pca$rotation[,"PC5", drop = FALSE] %>% 
  as_tibble( rownames = "id") %>% 
  left_join( all_genes_palate %>%  
               select(id, symbol)
             ) %>% 
  filter( abs(PC5) >= quantile(abs(PC5), 0.95))


g.pc1 <- gost(
  query = pc1_drivers$symbol,
  organism = "mmusculus",
  domain_scope = "custom",
  custom_bg = all_genes_palate$symbol,
  evcodes = TRUE
)
g.pc1$result <- g.pc1$result %>% filter(term_size < 660)

g.pc2 <- gost(
  query = pc2_drivers$symbol,
  organism = "mmusculus",
  domain_scope = "custom",
  custom_bg = all_genes_palate$symbol,
  evcodes = TRUE
)
g.pc2$result <- g.pc2$result %>% filter(term_size < 660)

g.pc3 <- gost(
  query = pc3_drivers$symbol,
  organism = "mmusculus",
  domain_scope = "custom",
  custom_bg = all_genes_palate$symbol,
  evcodes = TRUE
)
g.pc3$result <- g.pc3$result %>% filter(term_size < 660)

g.pc4 <- gost(
  query = pc4_drivers$symbol,
  organism = "mmusculus",
  domain_scope = "custom",
  custom_bg = all_genes_palate$symbol,
  evcodes = TRUE
)
g.pc4$result <- g.pc4$result %>% filter(term_size < 660)

g.pc5 <- gost(
  query = pc5_drivers$symbol,
  organism = "mmusculus",
  domain_scope = "custom",
  custom_bg = all_genes_palate$symbol,
  evcodes = TRUE
)
g.pc5$result <- g.pc5$result %>% filter(term_size < 660)


```

```{r ora_pca_table}

g.pc1$result %>% 
  mutate( PC = "PC1") %>% 
  select( PC, term_name, source, FDR = p_value, term_size, intersection_size,intersection) %>%  # intersecion: adding the list of genes identified as overlapping with each category
  filter( FDR <0.05) %>% 
  rbind(
    g.pc2$result %>% 
  mutate( PC = "PC2") %>% 
  select( PC, term_name, source, FDR = p_value, term_size, intersection_size,intersection) %>% 
    filter( FDR <0.05) 
  ) %>% 
  #   rbind(
  #   g.pc3$result %>% 
  # mutate( PC = "PC3") %>% 
  # select( PC, term_name, source, FDR = p_value, term_size, intersection_size,intersection) %>% 
  #   filter( FDR <0.05) 
  # ) %>% 
  #     rbind(
  #   g.pc4$result %>% 
  # mutate( PC = "PC4") %>% 
  # select( PC, term_name, source, FDR = p_value, term_size, intersection_size,intersection) %>% 
  #   filter( FDR <0.05) 
  # ) %>% 
  # rbind(
  #   g.pc5$result %>% 
  # mutate( PC = "PC5") %>% 
  # select( PC, term_name, source, FDR = p_value, term_size, intersection_size,intersection) %>% 
  #   filter( FDR <0.05) 
  # ) %>% 
  mutate_if( is.numeric, formatC, digits =2) %>% 
  create_dt()

```


## Correlation

Looking at the correlation of the transcriptomes between individual samples. 

```{r sample_corr}
#| message: false
#| warning: false
#| cache: true

palate_sample_cor <- rcorr(expr, type = "pearson")
palate_sample_cor_sp <- rcorr(t(exprZ), type = "spearman")


sample_cor_df <- palate_sample_cor$r |> 
  as_tibble( rownames = "sampleid_row") |> 
  pivot_longer(
    cols = 2:97,
    names_to = "sampleid_col",
    values_to = "cor_p"
  ) |> 
  left_join(
    palate_sample_cor_sp$r |> 
      as_tibble( rownames = "sampleid_row") |> 
      pivot_longer(
        cols = 2:97,
        names_to = "sampleid_col",
        values_to = "cor_sp"
    )
  )
  

```


```{r sample_cor_heatmaps}
#| warning: false
#| message: false
#| fig-height: 16
#| fig-width: 20
#
samples <- c("DO_13.5_MAX_16", 
                       "DO_13.5_MAX_38",
                       "DO_13.5_MAX_46",
                       "DO_13.5_MAX_47",
                       "DO_13.5_MAX_80",
                       "DO_13.5_MAX_83",
                       "DO_13.5_MAX_89")
highlight_samples <- sample_annot |> 
  mutate( label = ifelse( sample %in% samples, sample, "")) |> 
  select(label, sample) |> 
  column_to_rownames("sample")

# pheatmap(palate_sample_cor$r,
#          labels_row = highlight_samples[rownames(palate_sample_cor$r),],
#          labels_col = highlight_samples[colnames(palate_sample_cor$r),],
#          clustering_distance_rows = "euclidean",
#          clustering_distance_cols = "euclidean",
#          scale = "none",
#          main = "Pearson correlation of gene counts"
#          )

pheatmap(palate_sample_cor_sp$r,
         labels_row = highlight_samples[rownames(palate_sample_cor$r),],
         labels_col = highlight_samples[colnames(palate_sample_cor$r),],
         clustering_distance_rows = "euclidean",
         clustering_distance_cols = "euclidean",
         scale = "none",
         main = "Spearman correlation of rankZ transformed gene counts"
         )
```




## Sex effects

```{r sex_eff}
#| warning: false
#| message: false
#| cache: true

# doing an anova first and then tukey's 
# reporting ones with significance on both as genes with sex effects

# updating the code to use anova followed by tukey's hsd:
expr %>%
  as_tibble(rownames = "gene_id") %>%
  pivot_longer( cols = colnames(expr),
                values_to = "gene_expr",
                names_to = "sample") %>% 
  left_join(., select(covarTidy, sample, sex)) %>% 
  group_by(gene_id) %>% 
  rstatix::anova_test( gene_expr ~ sex) %>% 
  rstatix::adjust_pvalue( method = "BH") %>% 
  rstatix::add_significance("p.adj") %>% 
  as_tibble() -> palate_sex_aov

# passing the full data to tukey's then filtering
expr %>%
  as_tibble(rownames = "gene_id") %>% 
  pivot_longer( cols = colnames(expr),
                values_to = "gene_expr",
                names_to = "sample") %>% 
  left_join(., select(covarTidy, sample, sex)) %>% 
  group_by(gene_id) %>% 
  rstatix::tukey_hsd(gene_expr ~ sex) %>% 
  filter( gene_id %in% (filter(palate_sex_aov, p.adj.signif != "ns"))$gene_id & # filtering to only include genes with signif aov + tukeys
            p.adj.signif != "ns") -> palate_sex_tukeys


# get the medians for later
expr %>%
  as_tibble(rownames = "gene_id") %>%
  pivot_longer( cols = colnames(expr),
                values_to = "gene_expr",
                names_to = "sample") %>% 
  left_join(., select(covarTidy, sample, sex)) %>% 
  group_by(gene_id,sex) %>% 
  summarize( med = median(gene_expr, na.rm =T)) %>% 
  pivot_wider( id_cols = "gene_id",
               names_from = "sex",
               values_from = "med")-> palate_sex_med



```

```{r sex_eff_table}
#| warning: false
#| message: false

palate_sex_tukeys %>%
  left_join( all_genes_palate) %>% 
  left_join( palate_sex_med) %>% 
  arrange(p.adj) %>%
  mutate_if( is.numeric, round, 2) %>%
  select(
    `Gene ID` = gene_id,
    `MGI Symbol`= symbol, 
    `Gene location (chr)` = chromosome,
    `Female median`=`F`,
    `Male median`= M
   ) %>%
  create_dt()


```

## Closer look at some gene sets

Ian asked for a heatmap with the set of genes that are associated with "abnormal craniofacial morphology" obtained from MGI.

```{r heatmap_morpho_genes}
#| warning: false
#| message: false
#| fig-width: 18
#| fig-height: 20

samples <- c("DO_13.5_MAX_16", 
                       "DO_13.5_MAX_38",
                       "DO_13.5_MAX_46",
                       "DO_13.5_MAX_47",
                       "DO_13.5_MAX_80",
                       "DO_13.5_MAX_83",
                       "DO_13.5_MAX_89")
highlight_samples <- sample_annot |> 
  mutate( label = ifelse( sample %in% samples, sample, "")) |> 
  select(label, sample) |> 
  column_to_rownames("sample")
morpho_gene_set <- morpho_genes |> 
  inner_join(all_genes_palate)
pheatmap( mat = log1p(expr[morpho_gene_set$gene_id,]), 
          scale = "none",
          cluster_rows = TRUE,
          cluster_cols = TRUE,
          clustering_distance_rows = "euclidean",
          clustering_distance_cols = "correlation",
          #show_rownames = FALSE,
          #show_colnames = FALSE,
          labels_col = highlight_samples[colnames(expr),"label"],
          labels_row = morpho_gene_set$symbol,
          main = "Abnormal craniofacial morphology genes",
          fontsize_col = 6,
          fontsize_row = 3
          
          )

```

## Gene set variation analysis (GSVA)

```{r run_gsva}
#| warning: false
#| message: false
#| results: hide
#| cache: true

# reading in the GO + mgi downloaded from: http://www.informatics.jax.org/gotools/data/input/MGIgenes_by_GOid.txt
go_terms <- read_tsv( "http://www.informatics.jax.org/gotools/data/input/MGIgenes_by_GOid.txt") %>% 
  mutate( genes = str_split(genes, ",")) %>% 
  unnest() # separete the symbols, note the overlap: length(intersect(unique(go_terms$genes), npc.genes$mgi_symbol) ) = 11806


slim_go_terms <- read_tsv( "http://www.informatics.jax.org/gotools/data/input/map2MGIslim.txt") %>% 
  select(-term) %>% 
  mutate( ONT = case_when( aspect == "P" ~  "BP",
                     aspect == "F" ~ "MF",
                     aspect == "C" ~ "CC"
                     )
          ) %>% 
  select(-aspect)

genesbygo <- split(go_terms$genes, go_terms$GO_id)

go_terms_annot <- go_terms %>%  
  select(GO_id) %>% 
  distinct() %>% 
  left_join( slim_go_terms %>%  select( GO_id, ONT) %>% distinct())

goannot_wdef <- AnnotationDbi::select(GO.db::GO.db, keys= unique(go_terms$GO_id), columns=c("GOID","DEFINITION","ONTOLOGY","TERM")) %>%
  left_join( slim_go_terms, by=c("GOID"="GO_id")) %>% 
  mutate( ONTOLOGY = ONT) %>% 
  select(-ONT)

go_bp <- goannot_wdef %>% filter( ONTOLOGY == "BP") %>% 
  select(GOID) %>%  distinct()

# adding mammalian phenotypes!
genesbyMP <- split(mp_genes$symbol, mp_genes$mp_id)

# expr - change gene id's to symbols for GSVA with GO
expr.upd <- expr[all_genes_palate$gene_id,]
rownames(expr.upd) <- all_genes_palate$symbol

# run gsva
gsva_go <- GSVA::gsva(  expr = expr.upd,
                   gset.idx.list = genesbygo,
                    method ="gsva",
                    kcdf = "none",
                    min.sz = 5,
                    max.sz = 1000,
                    mx.diff = TRUE
                   )

gsva_mp <- GSVA::gsva(  expr = expr.upd,
                   gset.idx.list = genesbyMP,
                    method ="gsva",
                    kcdf = "none",
                    min.sz = 5,
                    max.sz = 5000, # setting to 1000 only removes 6 gene sets
                    mx.diff = TRUE
                   )

# following up on rna results
gsva_go %>% 
  as_tibble(rownames = "Category") %>% 
  filter( Category %in% go_bp$GOID) %>% #filtering for BP
  rbind( gsva_mp |> 
           as_tibble( rownames = "Category")) |> 
  pivot_longer( cols = colnames(expr.upd),
                values_to = "Enrichment_Score",
                names_to = "sample") %>% 
  # add covariates 
  left_join( sample_annot %>% 
               select(sample, sex, palate_closure,LB_stage_binned)) -> gsva_results

gsva_results %>% 
  group_by( Category) %>% 
  rstatix::anova_test( Enrichment_Score ~ sex+LB_stage_binned+palate_closure) %>% 
  rstatix::adjust_pvalue( method = "BH") %>%
  rstatix::add_significance("p.adj") %>% 
  ungroup() -> gsva_aov

gsva_results %>% 
  group_by(Category) %>% 
  rstatix::tukey_hsd( Enrichment_Score ~ sex+LB_stage_binned+palate_closure) %>% 
  ungroup() %>% 
  as_tibble() -> gsva_tukey

gsva_aov %>% 
  as_tibble() %>% 
  filter( p.adj.signif != "ns" & !is.na(p.adj) ) -> signif_eff_terms

gsva_tukey %>% 
  inner_join( ., select( signif_eff_terms, Category, term = Effect)) -> signif_results_tukey

```

Below are the list of GO Biological processes that show significant differences by sex, palate closure and presence of pinky nub (adjusted p-value \< 0.01).

::: panel-tabset

### GO BP terms and mammalian phenotypes showing significant differences 

```{r gsva_results_table}
#| warning: false
#| message: false


signif_eff_terms %>% 
  filter( p.adj<0.05) %>% 
  filter( str_detect(Category, "GO:")) |> 
  left_join( goannot_wdef |> 
               select(Category = GOID, TERM) |> 
               distinct()) |> 
  rbind(
    signif_eff_terms |> 
      filter( p.adj < 0.05) |> 
      filter(str_detect(Category, "MP:")) |> 
      left_join( mp_defs |> 
                   select(Category = mp_id,
                          TERM = term_name))
  ) |> 
  select(Effect, Category, TERM,p.adj) %>% 
  #filter( p.adj < 0.01) %>% 
  distinct() %>% 
  mutate( "Adjusted p-value" = formatC(p.adj, digits=2, format ="e")) %>% 
  select(-p.adj) %>% 
  create_dt()



  
```

Let's simplify the GO terms that show significant differences between LB stage bins:

```{r simplify_gsva_pn}
#| warning: false
#| message: false
#| fig-height: 8
#| fig-width: 16
#| cache: true


gsva_lb_stage_terms <- signif_eff_terms %>% 
  filter( p.adj<0.05, Effect == "LB_stage_binned", str_detect(Category, "GO")) 

simplifyGO( mat = GO_similarity(gsva_lb_stage_terms$Category, ont = "BP"))

#compare_clustering_methods(GO_similarity(gsva_pn_go_terms$Category, ont = "BP"))

```



### GO BP terms and mammalian phenotypes with QTL

```{r gsva_qtl_mapping}
#| warning: false
#| message: false

gsva_results %>%
  select(Category, sample, Enrichment_Score) %>%
  pivot_wider( id_cols = sample , names_from = Category, values_from = Enrichment_Score) %>%
  column_to_rownames("sample") %>%
  as.matrix() -> gsva_results_mat

# rankZ
gsva_results_mat_rankZ <- apply(gsva_results_mat, 2,rankZ )

# # # qtl mapping
# nbatch <- round(ncol(gsva_results_mat_rankZ)/1000)
# nn <- ncol(gsva_results_mat_rankZ)
# ss <- round(seq(0, nn, length.out=nbatch + 1))
# gsva_qtl <- list()
# for (i in 1:nbatch) {
#     start <- ss[i] + 1
#     end <- ss[i + 1]
#   
#     gsva_scan <- scan1( genoprobs = genoprobs,
#                    pheno = gsva_results_mat_rankZ[,start:end,drop=FALSE],
#                    kinship = kinship_loco,
#                    addcovar = covar[,"sex",drop=F]
#                    )
#   gsva_qtl[[i]]<- gsva_scan  
# }
# save( gsva_qtl, file = here("_data","GSVA_qtl_scans_v2.RData")) # adding mammalian phenotypes

load(here("_data","GSVA_qtl_scans_v2.RData"))
gsva_qtl_peaks <- lapply(gsva_qtl, find_peaks, threshold = 6, map = gmap)
gsva_qtl_peaks_merged <- do.call(rbind, gsva_qtl_peaks)
# add interp_peak_bp, before, after
gsva_qtl_peaks_merged_annot <- gsva_qtl_peaks_merged %>%
  filter( str_detect(lodcolumn, "GO:")) |> 
  left_join( goannot_wdef |> 
               select(lodcolumn = GOID, TERM) |> 
               distinct()) |> 
  mutate( TERM = ifelse( is.na(TERM), lodcolumn, TERM)) %>%
  rbind(
    gsva_qtl_peaks_merged |> 
      filter(str_detect(lodcolumn, "MP:")) |> 
      left_join( mp_defs |> 
                   select(lodcolumn = mp_id,
                          TERM = term_name))
  ) |> 
  mutate(phenotype=lodcolumn) %>%
  mutate( peak_chr = chr,
          peak_cM = pos) %>%
  interp_bp(.) #add bp location for peaks

```

```{r gsva_qtl_plot}
#| warning: false
#| message: false
#| fig-width: 12
#| fig-height: 6


plot_lodpeaks( gsva_qtl_peaks_merged |> filter(lod >9), gmap, main = "Peaks LOD > 9")

```

```{r gsva_qtl_peaks_table}

gsva_qtl_peaks_merged_annot %>% 
  select( TERM, lod, chr, interp_bp_peak) %>% 
  filter(lod > 9) %>% 
  arrange(chr) %>% 
  mutate_if(is.numeric, round, 2) %>% 
  create_dt()

```

### Follow up on QTL with the highest LOD score

```{r gsva_qtl_follow_up}

# aromatic compound catabolic process has a QTL with a LOD > 16
# get the genes within this GO term + do they have local eQTL?
# allele effects plot + mediation 
highest_lod_peak <- gsva_qtl_peaks_merged_annot %>% slice_max(lod)
highest_lod_scan <-scan1( genoprobs = genoprobs,
                    pheno = gsva_results_mat_rankZ[,highest_lod_peak$lodcolumn,drop = F],
                    kinship = kinship_loco,
                    addcovar = covar[,"sex",drop=F]
                    )
highest_lod_eff <- scan1blup( genoprobs = genoprobs[,highest_lod_peak$chr],
                    pheno = gsva_results_mat_rankZ[,highest_lod_peak$lodcolumn,drop = F],
                    kinship = kinship_loco[[highest_lod_peak$chr]],
                    addcovar = covar[,"sex",drop=F]
                    )

# chr 2 hotspot: 107870660 - 115487435
# chr 13 hotspot: 101771192 - 107092075
# genes within each category - do they have distant eQTL within the hotspots?
# get allele effects + mediation
gsva_highlight_qtl <- gsva_qtl_peaks_merged_annot %>% 
  filter( 
    (peak_chr == 2 & 
       between(interp_bp_peak, left = 107870660, right = 115487435)) |
           (peak_chr == 13 & between(interp_bp_peak, left = 101771192, right = 107092075) )
          ) %>% 
  filter( lod > 9)

# gsva_highlight_qtl |>
#   select(TERM, peak_chr, lod, interp_bp_peak) |>
#   mutate_if( is.numeric, round, 2) |>
#   create_dt()
```

`r highest_lod_peak$TERM` has a strong QTL on chromosome `r highest_lod_peak$chr` that seems to be driven by two genes in this category with local eQTL.

```{r highest_lod_plot}
#| warning: false
#| message: false
#| fig-width: 12
#| fig-height: 5


plot_coefCC( highest_lod_eff, pmap, scan1_output = highest_lod_scan, legend = "bottomright",
             main = paste0( highest_lod_peak$TERM))

```

```{r highest_lod_genes}

go_terms %>% 
  filter( GO_id == highest_lod_peak$lodcolumn, genes %in% all_genes_palate$symbol) %>% 
  left_join(., peaks_annotated %>% 
              filter( lod > 8.23) %>% 
              select( genes = symbol, chromosome, peak_chr, lod, interp_bp_peak, LETTERS[1:8])) %>% 
  select( -GO_id) %>% 
  distinct() %>% 
  filter(peak_chr == highest_lod_peak$chr) %>% 
  mutate_if(is.numeric, round ,2) %>% 
  create_dt()

```

### Follow up on QTL co-mapping to eQTL hotspots

Biological processes that co-map to chromosome 2 or 13 eQTL hotspots and show similar allele effects:

-   protein retention in ER lumen
-   ossification
-   positive regulation of osteoblast differentiation
-   osteoporosis
-   decreased osteoclast cell number

```{r gsva_chr2_13_qtl}
#| results: asis
#| echo: false
#| eval: true
#| cache: true
#| message: false
#| fig-height: 6
#| fig-width: 12

haps <- LETTERS[1:8]

gsva_highlight_qtl <- filter(gsva_highlight_qtl, 
                             TERM %in% c("protein retention in ER lumen",
                                         "ossification",
                                         "positive regulation of osteoblast differentiation",
                                         "osteoporosis",
                                         "decreased osteoclast cell number"
                                         )
                             )

for( i in 1:nrow(gsva_highlight_qtl)){
  peak_chr <- gsva_highlight_qtl$peak_chr[i]
  lodcolumn <- gsva_highlight_qtl$lodcolumn[i]
  
  #pQTL scan
  qtl_scan <- scan1(genoprobs = genoprobs,
                 pheno = gsva_results_mat_rankZ[,lodcolumn,drop = F],
                 kinship = kinship_loco,
                 addcovar = covar[,"sex",drop=F])
  qtl_effs <- scan1blup(genoprobs =genoprobs[,peak_chr],
                   pheno = gsva_results_mat_rankZ[,lodcolumn,drop = F],
                   kinship = kinship_loco[[peak_chr]],
                   addcovar = covar[,"sex",drop=F])
  cat('### ',gsva_highlight_qtl$TERM[i],'peak on', peak_chr ,' \n')
  plot_coefCC(qtl_effs,
                            pmap, 
                            scan1_output = qtl_scan, 
                            main=paste0(gsva_highlight_qtl$TERM[i]," plot"),
              xlim = c(gsva_highlight_qtl$interp_bp_peak[i]-20e06, 
                       gsva_highlight_qtl$interp_bp_peak[i]+20e06) )
  abline(v=gsva_highlight_qtl$interp_bp_peak[i],col="red",lwd=2,lty=3)
  cat(' \n \n')
}



```


Mediation of these QTL:

```{r gsva_qtl_mediation}
#| warning: false
#| message: false
#| results: hide

# mediate with RNA data
gsva_highlight_qtl <- gsva_highlight_qtl %>% 
  left_join( map_dat2 %>% select(pos, marker) %>% mutate(pos = as.numeric(pos)))

gsva_peak_meds <- c()
for(i in 1:nrow(gsva_highlight_qtl)){
  qtl_geno <- pull_genoprobpos(genoprobs, gsva_highlight_qtl$marker[i])

  meds <- mediation.scan( target =as.matrix(gsva_results_mat_rankZ[,gsva_highlight_qtl$lodcolumn[i]]),
                               mediator = exprZ[rownames(gsva_results_mat_rankZ),all_genes_palate$gene_id,drop=F], 
                               annotation =  all_genes_palate %>%
                                 mutate(chr=chromosome,pos=abs(end+start)/2),
                               qtl.geno = qtl_geno[rownames(gsva_results_mat_rankZ),],
                               covar = covar[rownames(gsva_results_mat_rankZ),"sex",drop=FALSE])
  
  meds <- meds %>% 
      mutate( 
        TERM = gsva_highlight_qtl$TERM[i],
        qtl_lod = gsva_highlight_qtl$lod[i],
              peak_chr = gsva_highlight_qtl$chr[i],
              interp_bp_peak = gsva_highlight_qtl$interp_bp_peak[i])
  
  gsva_peak_meds[[i]] <- meds
}

gsva_peak_meds_merged <- do.call(rbind, gsva_peak_meds) %>% 
  filter( peak_chr == chromosome & 
          interp_bp_peak >=pos-10e06 &
            interp_bp_peak <= pos+10e06 &
            LOD < qtl_lod)

```

```{r}

gsva_peak_meds_merged %>% 
  group_by(TERM, peak_chr, qtl_lod) %>% 
  slice_min( LOD, n = 5) %>% 
  ungroup() %>% 
  select(TERM, mediator = symbol, mediator_chr = chromosome, peak_chr, qtl_lod, mediation_lod = LOD) %>% 
  mutate_if(is.numeric, round, 2) %>% 
  create_dt()
  
```

:::

## Weighted gene co-expression network analysis

<!-- Module details: -->

<!-- -   Blue: -->

<!--     -   No trait correlations. -->

<!--     -   QTL within chr2 hotspot. -->

<!--     -   GO BP & KEGG: recombinational repair, Nucleocytoplasmic transport, Ubiquitin mediated proteolysis. -->

<!--     -   TF: REX1, Zfx, HOXD13. -->

<!--     -   Lots of HP and miRNAs. -->

<!-- -   Pink: -->

<!--     -   Significant negative correlation to LB stage \> Palate closure \> Pinky nub. -->

<!--     -   QTL on chr 1. -->

<!--     -   No ORA. -->

<!-- -   Brown: -->

<!--     -   Significant positive correlation to LB stage \> Palate closure \> Pinky nub. -->

<!--     -   QTL on chr 13 within the hotspot. -->

<!--     -   GO BP: extracellular matrix organization, inflammatory response, ossification, biomineral tissue development, wound healing, angiogenesis, metal ion homeostasis, regulation of ERK1 and ERK2 cascade, muscle tissue development. -->

<!--     -   TF: EKLF. -->

<!--     -   HP: Many! -->

<!--     -   KEGG: Osteoclast differentiation, Calcium signaling pathway, Protein processing in endoplasmic reticulum, MAPK signaling pathway, Extracellular matrix organization. -->

<!--     -   REAC: Muscle contraction, Collagen formation, Keratinization, ECM proteoglycans, Signaling by Receptor Tyrosine Kinases. -->

<!-- -   Turquoise: -->

<!--     -   No trait correlation or QTL. -->

<!--     -   GO BP: Translation, cellular respiration (and other mitochondria related processes), mRNA processing, tRNA processing. -->

<!--     -   KEGG: Ribosome, Spliceosome. -->

<!--     -   REAC: Translation, Nonsense-Mediated Decay, Respiratory electron transport, p53-Independent G1/S DNA damage checkpoint, Ubiquitin-dependent degradation of Cyclin D,APC/C-mediated degradation of cell cycle proteins, MAPK6/MAPK4 signaling, noncanonical NF-kB signaling, Transcriptional Regulation by TP53. -->

<!--     -   TF: Elf-1, Pet-1, ETV3, ERG, GABPalpha_GABPbeta, nerf, Fli-1, Thap11, Otx2. -->

<!-- -   Green: -->

<!--     -   Significant negative correlation to LB stage \> Palate closure \> Pinky nub. -->

<!--     -   QTL on chr 13 within the hotspot. -->

<!--     -   GO BP: regulation of chromosome segregation, metaphase/anaphase transition of mitotic cell cycle,chromatin remodeling, regulation of response to DNA damage stimulus, limb development. -->

<!--     -   REAC: Cell Cycle, Mitotic, Mitotic Spindle Checkpoint, Resolution of Sister Chromatid Cohesion, Mitotic Metaphase and Anaphase, -->

<!-- -   Purple: -->

<!--     -   Negative correlation to pinky nub. -->

<!--     -   No QTL. -->

<!--     -   GO BP: oxidative phosphorylation, cellular respiration. -->

<!--     -   HP: Several diseases related to mt proteins. -->

<!--     -   REAC: Respiratory electron transport, Transcriptional Regulation by TP53, DNA Replication, APC/C-mediated degradation of cell cycle proteins. -->

<!-- -   Yellow: -->

<!--     -   Significant positive correlation to LB stage \> Palate closure \> Pinky nub. -->

<!--     -   QTL on chr 1 & 13, both in eQTL hotspots. -->

<!--     -   GO BP: extracellular matrix organization, angiogenesis, G protein-coupled receptor signaling pathway, metal ion homeostasis, glycoprotein metabolic process, regulation of vasculature development, muscle cell differentiation, striated muscle cell differentiation, skeletal system development, wound healing, ossification. -->

<!--     -   HP: Many! -->

<!--     -   KEGG: PI3K-Akt signaling pathway, Rap1 signaling pathway, cAMP signaling pathway, cGMP-PKG signaling pathway, Protein processing in endoplasmic reticulum, Phagosome, Lysosome. -->

<!--     -   REAC: Extracellular matrix organization, RHO GTPase cycle, Assembly of collagen fibrils and other multimeric structures, SLC-mediated transmembrane transport, RAC1 GTPase cycle, RHOA GTPase cycle. -->

<!-- -   Tan: -->

<!--     -   Negative correlation to LB stage and palate closure. -->

<!--     -   QTL on chromosomes 2 and 4, both within eQTL hotspots. -->

<!--     -   GO BP: axonogenesis -->

<!--     -   HP: ADHD, hyperactivity, Autistic behavior, Abnormal nasal tip morphology, Abnormality of upper lip vermillion. -->

<!--     -   REAC: Epigenetic regulation of gene expression -->

<!-- -   Magenta: -->

<!--     -   Positive correlation to LB stage. -->

<!--     -   QTL on chr 14. -->

<!--     -   GO BP: axonogenesis, regulation of trans-synaptic signaling, axon development, synapse organization, regulation of nervous system process. -->

<!--     -   HP: Many diseases related to nervous system development. -->

<!--     -   KEGG: Synaptic vesicle cycle, Neuroactive ligand-receptor interaction. -->

<!--     -   REAC: Neuronal System, Transmission across Chemical Synapses, Neurotransmitter release cycle. -->

<!--     -   TF: NRSF, E47. -->

<!-- -   Salmon: -->

<!--     -   No trait correlation or QTL. -->

<!--     -   GO BP & REAC: chromatin remodeling, Chromatin organization. -->

<!--     -   HP: Many. -->

```{r run_wgcna}
#| warning: false
#| message: false
#| cache: true
#| results: hide

datExpr <- t(expr)
# # Choose a set of soft-thresholding powers
# powers = c(c(1:10), seq(from = 12, to=20, by=2))
# # Call the network topology analysis function
# sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# # Plot the results:
# sizeGrWindow(9, 5)
# par(mfrow = c(1,2));
# cex1 = 0.9;
# # Scale-free topology fit index as a function of the soft-thresholding power
# plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
# xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
# main = paste("Scale independence"));
# text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
# labels=powers,cex=cex1,col="red");
# # this line corresponds to using an R^2 cut-off of h
# abline(h=0.90,col="red")
# # Mean connectivity as a function of the soft-thresholding power
# plot(sft$fitIndices[,1], sft$fitIndices[,5],
# xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
# main = paste("Mean connectivity"))
# text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")

# using the recommended power = 12 for signed networks.
# using log1p transformed data following recommendations here: https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/faq.html
net = blockwiseModules( log1p(datExpr), 
                       power = 12,
                       networkType = "signed",
                       TOMType = "signed", 
                       minModuleSize = 30,
                       reassignThreshold = 0, 
                       mergeCutHeight = 0.25,
                       deepSplit = 2, 
                       numericLabels = TRUE, 
                       pamRespectsDendro = FALSE,
                       maxBlockSize = 20000,
                       verbose = 3)


```

```{r wgcna_modules}
#| warning: false
#| message: false
#| fig-width: 12
#| fig-height: 6

# open a graphics window
# sizeGrWindow(12, 9)
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
"Module colors",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)

```

```{r wgcna_module_characterization}
#| message: false
#| warning: false
#| cache: true


## Trait correlations
# Define numbers of genes and samples
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
# Recalculate MEs with color labels
moduleColors = labels2colors(net$colors)
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
datTraits <- sample_annot %>% 
  select(sample, sex, LB_stage, palate_closure, pinky_nub) %>% 
  mutate( sex = ifelse(sex == "M", 0, 1), 
          pinky_nub =ifelse( is.na(pinky_nub) , 0, 1),
          palate_closure=case_when(
            is.na(palate_closure)~0,
            palate_closure =="vertical"~1,
            palate_closure =="mid"~2,
            palate_closure =="late"~3,
            palate_closure =="elevated"~4,
            palate_closure =="closed"~5,
            palate_closure =="early"~6
          )) %>% 
  column_to_rownames("sample")
moduleTraitCor = cor(MEs, datTraits, use = "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
moduleTraitPvalue_adj = apply(moduleTraitPvalue,2, p.adjust, method = "BH")

## ORA for each module
modules = unique(labels2colors(net$colors))
ora_results <- c()
for( mod in modules){
  modGenes = all_genes_palate[all_genes_palate$gene_id %in% colnames(datExpr)[(moduleColors==mod)],]$symbol
  g.mod <- gost(query =  unique(modGenes),
                        organism = "mmusculus",
                        domain_scope = "custom",
                        custom_bg = all_genes_palate$symbol,
                        evcodes = TRUE)
  ora_results[[mod]] <- g.mod
}

module_genes <- net$colors |> 
  as_tibble( rownames = "gene_id") |>
  rename("module_num" = "value") |> 
  cbind(moduleColors)

# qtl mapping
MEs_rankz <- apply(MEs, 2, rankZ)
wgcna_qtl <- scan1( genoprobs = genoprobs, 
                    pheno = MEs_rankz, 
                    addcovar = covar[,"sex",drop=F], 
                    kinship = kinship_loco
                    )

wgcna_qtl_peaks <- find_peaks(wgcna_qtl, threshold = 5, gmap)


```

::: panel-tabset

### Module genes

::: {#WGCNA_module_genes .panel-tabset .nav-pills}

```{r module_gene_expr_plots}
#| warning: false
#| message: false
#| results: asis
#| fig-width: 8
#| fig-height: 12

col_data <- sample_annot[,c("sample","sex","LB_stage","palate_closure","pinky_nub"),drop=F] |> 
  as_tibble() |> 
  mutate(pinky_nub = ifelse(is.na(pinky_nub),"FALSE","TRUE")) |> 
  column_to_rownames("sample") 
  
for( mod_col in unique(module_genes$moduleColors)){
  mod_genes <- module_genes |> 
    filter(moduleColors ==mod_col)
  
  cat("\n####",mod_col, "module","\n")
  p <- pheatmap(mat = log1p(t(datExpr[,mod_genes$gene_id, drop = FALSE])),
         show_rownames = F,
         show_colnames = F, 
         color = viridisLite::plasma(512, begin = 0, end = 1,direction = -1 ),
         annotation_col = col_data,
         annotation_colors = list(
                    sex = c("F" ="red","M"="lightblue"),
                    LB_stage = viridisLite::viridis(100,begin = 0, end = 1, direction = -1, option = "D"),
                    #palate_closure = c(RColorBrewer::brewer.pal(n = 6,"Dark2")),
                    pinky_nub = c("TRUE"="darkgreen","FALSE"="lightyellow")

                    )
  )
  print(p)
  cat("\n\n")
  # print(mod_genes |>
  #   inner_join( strain_eff_genes_merged ) |>
  #   select(module = moduleColors,gene_id, symbol, baseMean, log2FoldChange, padj,test) |>
  #   mutate_if(is.numeric, formatC, digits = 2) |>
  #   create_dt())
  # cat("\n\n")
}        
         
```

:::

### Module eigengenes

::: {#WGCNA_module_eigengenes .panel-tabset .nav-pills}

```{r module_eigengene_plots}
#| warning: false
#| message: false
#| results: asis
#| fig-width: 8
#| fig-height: 6

module_eigenges <- MEs |> 
  as_tibble( rownames = "sample") |> 
  left_join(sample_annot |> 
              select(sample, sex, LB_stage, palate_closure, AP_domain, Gest_stage, strain)
            )
module_colors <- unique(labels2colors(net$colors))
names(module_colors) <- paste0("ME",module_colors)

module_eigengenes_long <-  module_eigenges |> 
  pivot_longer(2:(length(module_colors)+1), names_to = "module",values_to = "value") |> 
  mutate( mod_col = factor(gsub("ME","",module), levels =module_colors ))

plot_eigengene_by_samples <- function(mod_name){
  
  df <- module_eigengenes_long |> 
    filter( module == mod_name) |> 
    arrange( value) |> 
    mutate( sample = as_factor(sample))
  
  eigengene_plot <- df |> 
    ggplot()+
    aes( y = value, x= sample, fill = mod_col)+
    geom_bar(stat = "identity", col = "black")+
    scale_fill_manual( values = module_colors[[mod_name]])+
    #scale_color_manual( values = module_colors)+
    theme_pubclean()+
    theme( legend.position = "none",
           axis.text.x = element_blank(),
          axis.ticks.x = element_blank())+
    xlab("")+
    ylab("Module summary eigengene")
    facet_wrap(~module)

    sex_annot_plot <- df |> 
      ggplot()+
      aes( y = 1, x= sample, fill=sex,col = sex)+
      geom_tile()+
      theme_pubclean(base_size = 8)+
      # scale_fill_manual(values = strain_colors)+
      # scale_color_manual(values = strain_colors)+
      color_palette("npg")+
      fill_palette("npg")+
      theme( legend.position = "bottom",
             legend.key.height =  unit(0.2, 'cm'),
             axis.text.x = element_blank(),
             axis.ticks.x = element_blank(),
             axis.text.y = element_blank(),
             axis.ticks.y = element_blank())+
      xlab("")+
      ylab("")
    
    dom_annot_plot <- df|>
        ggplot()+
        aes( y = 1, x= sample, fill=AP_domain,col = strain)+
        geom_tile()+
        theme_pubclean(base_size = 8)+
        scale_fill_manual(values = domain_colors)+
        scale_color_manual(values = domain_colors)+
        theme( legend.position = "bottom",
               legend.key.height =  unit(0.2, 'cm'),
               axis.text.x = element_blank(),
               axis.ticks.x = element_blank(),
               axis.text.y = element_blank(),
               axis.ticks.y = element_blank())+
        xlab("")+
        ylab("")
    
    stage_annot_plot <- df |> 
        ggplot()+
        aes( y = 1, x= sample, fill=LB_stage,col = LB_stage)+
        geom_tile()+
        theme_pubclean(base_size = 8)+
        scale_color_viridis_c(begin = 0, end = 1, direction = -1, option = "D")+
        scale_fill_viridis_c(begin = 0, end = 1, direction = -1, option = "D")+
        theme( legend.position = "bottom",
               legend.key.height =  unit(0.2, 'cm'),
               axis.text.x = element_blank(),
               axis.ticks.x = element_blank(),
               axis.text.y = element_blank(),
               axis.ticks.y = element_blank())+
        xlab("")+
        ylab("")
      plot <- ggarrange(eigengene_plot, 
                ggarrange(NULL,sex_annot_plot, nrow =1 , widths = c(0.05,1)), 
                # ggarrange(NULL,dom_annot_plot, nrow =1 , widths = c(0.05,1)),
                ggarrange(NULL,stage_annot_plot, nrow =1 , widths = c(0.05,1)),
                nrow = 3, heights = c(1.5, 0.3,0.35) )
    return(plot)
}


for(mod in names(module_colors)){
  
  cat("\n####",module_colors[[mod]], "module","\n")
  print(plot_eigengene_by_samples(mod))
  cat("\n \n")
  
}

# a <- plot_eigengene_by_samples("MEblack")
# ggsave(a, filename = here("_figures","test.pdf"), width = 8, height = 6)

```

:::


### Module-trait correlations

```{r wgcna_trait_cor}
#| message: false
#| warning: false
#| fig-width: 12
#| fig-height: 6
corrplot(moduleTraitCor, p.mat = moduleTraitPvalue_adj, insig = "label_sig", pch.cex = 1.1, pch.col = "red",
         rder = 'AOE', cl.pos = 'n', 
         col = COL2('PRGn'))
colorlegend(xlim=c(6,8), ylim=c(2,12), COL2('PRGn'), c(seq(-1,1,.5)), align="l", vertical=TRUE, addlabels=TRUE)

```

```{r module_trait_cor_table}
#| warning: false
#| message: false
moduleTraitCor[,c("sex","LB_stage","palate_closure","pinky_nub")] |> 
  as_tibble(rownames = "module") |> 
  pivot_longer(2:5, names_to = "effect", values_to = "Correlation") |> 
  full_join(
    moduleTraitPvalue_adj[,c("sex","LB_stage","palate_closure","pinky_nub")] |> 
      as_tibble(rownames = "module") |> 
      pivot_longer(2:5 ,names_to = "effect", values_to = "Adjusted p-value")
  ) |> 
  #filter(`Adjusted p-value` < 0.05) |> 
  mutate_if(is.numeric, formatC, digits=2) |> 
  create_dt()

```

### Module QTL

```{r wgcna_qtl_map_plot}
#| message: false
#| warning: false
#| fig-width: 12
#| fig-height: 6

plot_lodpeaks(find_peaks(wgcna_qtl, threshold = 7, gmap), gmap, main = "Peaks LOD > 7")

```

```{r wgcna_qtl_table}

wgcna_qtl_peaks %>% 
  mutate(phenotype=lodcolumn) %>%
  mutate( peak_chr = chr,
          peak_cM = pos) %>%
  interp_bp(.) %>% 
  select( Module = lodcolumn, lod, chr, interp_bp_peak) %>% 
  filter(lod > 7) %>% 
  arrange(chr) %>% 
  mutate_if(is.numeric, round, 2) %>% 
  create_dt()

```

Here are the QTL plots for the ones with matching allele effects to the eQTL hotspots:

```{r wgcna_chr2_13_qtl}
#| results: asis
#| echo: false
#| eval: true
#| cache: true
#| message: false
#| fig-height: 6
#| fig-width: 12

haps <- LETTERS[1:8]

# blue on 2, brown on 2
# green on 13, yellow on 13, brown on 13

wgcna_highlight_qtl <- wgcna_qtl_peaks %>% 
  mutate(peak_chr = chr, peak_cM = pos) %>% 
  interp_bp() %>% 
  filter( 
    (peak_chr == 2 & 
       between(interp_bp_peak, left = 107870660, right = 115487435)) |
           (peak_chr == 13 & between(interp_bp_peak, left = 101771192, right = 107092075) )
          ) %>% 
  filter(lodcolumn  %in% c("MEblue","MEbrown","MEgreen","MEyellow")) %>% 
  left_join( map_dat2 %>% 
               select(pos, marker) %>% 
               mutate(pos = as.numeric(pos))
             ) 
  


for( i in 1:nrow(wgcna_highlight_qtl)){
  peak_chr <- wgcna_highlight_qtl$peak_chr[i]
  lodcolumn <- wgcna_highlight_qtl$lodcolumn[i]
  
  #pQTL scan
  qtl_scan <- scan1(genoprobs = genoprobs,
                 pheno = MEs_rankz[,lodcolumn,drop = F],
                 kinship = kinship_loco,
                 addcovar = covar[,"sex",drop=F])
  qtl_effs <- scan1blup(genoprobs =genoprobs[,peak_chr],
                   pheno = MEs_rankz[,lodcolumn,drop = F],
                   kinship = kinship_loco[[peak_chr]],
                   addcovar = covar[,"sex",drop=F])
  cat('### ',wgcna_highlight_qtl$lodcolumn[i],'peak on', peak_chr ,' \n')
  plot_coefCC(qtl_effs,
                            pmap, 
                            scan1_output = qtl_scan, 
                            main=paste0(wgcna_highlight_qtl$lodcolumn[i]," plot"),
              xlim = c(wgcna_highlight_qtl$interp_bp_peak[i]-10e06, 
                       wgcna_highlight_qtl$interp_bp_peak[i]+10e06) )
  abline(v=wgcna_highlight_qtl$interp_bp_peak[i],col="red",lwd=2,lty=3)
  cat(' \n \n')
}



```

Mediation results:

```{r wgcna_qtl_mediation}
#| warning: false
#| message: false
#| results: hide

# mediate with RNA data

wgcna_peak_meds <- c()
for(i in 1:nrow(wgcna_highlight_qtl)){
  qtl_geno <- pull_genoprobpos(genoprobs, wgcna_highlight_qtl$marker[i])

  meds <- mediation.scan( target =as.matrix(MEs_rankz[,wgcna_highlight_qtl$lodcolumn[i]]),
                               mediator = exprZ[rownames(MEs_rankz),all_genes_palate$gene_id,drop=F], 
                               annotation =  all_genes_palate %>%
                                 mutate(chr=chromosome,pos=abs(end+start)/2),
                               qtl.geno = qtl_geno[rownames(MEs_rankz),],
                               covar = covar[rownames(MEs_rankz),"sex",drop=FALSE])
  
  meds <- meds %>% 
      mutate( 
        module = wgcna_highlight_qtl$lodcolumn[i],
        qtl_lod = wgcna_highlight_qtl$lod[i],
              peak_chr = wgcna_highlight_qtl$chr[i],
              interp_bp_peak = wgcna_highlight_qtl$interp_bp_peak[i])
  
  wgcna_peak_meds[[i]] <- meds
}

wgcna_peak_meds_merged <- do.call(rbind, wgcna_peak_meds) %>% 
  filter( peak_chr == chromosome & 
          interp_bp_peak >=pos-10e06 &
            interp_bp_peak <= pos+10e06 &
            LOD < qtl_lod)

```

```{r}

wgcna_peak_meds_merged %>% 
  group_by(module, peak_chr, qtl_lod) %>% 
  slice_min( LOD, n = 5) %>% 
  ungroup() %>% 
  select(module, mediator = symbol, mediator_chr = chromosome, peak_chr, qtl_lod, mediation_lod = LOD) %>% 
  mutate_if(is.numeric, round, 2) %>% 
  create_dt()
  
```

### ORA results for modules

```{r wgcna_ora_restuls_table}

do.call( rbind, ora_results) %>% 
  as_tibble(rownames = "module") %>% 
  select(-meta) %>% 
  unnest("result") %>% 
  select(module,  term_name, source, FDR = p_value, term_size, intersection_size,intersection) %>% 
    filter( FDR <0.01, term_size < 500) %>% 
  mutate_if( is.numeric, formatC, digits =2) %>% 
  create_dt()
  

```

:::

:::

# Genetic mapping with transcript abundance and morphological traits

```{r est_herit}
#| warning: false
#| message: false

kinship_palate <- calc_kinship(genoprobs, type ="overall" )
herit_palate <- est_herit( 
  pheno = exprZ, 
  kinship = kinship_palate, 
  addcovar = covar[,"sex",drop=F]
  )

```

Out of `r formatC(nrow(expr),big.mark =",")` transcripts, `r formatC(herit_palate %>% as_tibble(rownames= "gene_id") %>% filter(value >0) %>% nrow(), big.mark=",")` has non-zero heritability and the median heritability is `r round((herit_palate %>% as_tibble(rownames= "gene_id") %>% summarize( mean = median(value)))$mean,2)`.
We have identified `r formatC( nrow(filter(peaks_annotated, lod > 8.23)), big.mark = ",")` significant eQTL from `r formatC( length(unique(filter(peaks_annotated, lod > 8.23)$gene_id)), big.mark = ",")` genes where `r formatC(nrow(filter(peaks_annotated, lod > 8.23, local)), big.mark = ",")` are local and `r formatC(nrow(filter(peaks_annotated, lod > 8.23, !local)), big.mark = ",")` distant (LOD \> 8.23, alpha = 0.05).
The distant eQTL form hotspots on chromosomes 2 and 13 which I have followed up in detail in the following sections.
Hotspots on chromosomes 2 and 13 are especially prominent containing more than 100 significant distant eQTL and both have a clear mediator.

Target eQTL within the chromosome 2 hotspot show an overrepresentation for genes involved in chromatin remodeling and nervous system development.
Inferred founder allele effects of the target eQTL show a 3:5 pattern where laboratory strains B6, 129 and NZO group together while all the wild derived strains group with the laboratory strains NOD and A/J.
Top candidate mediator is *Trp53bp1* which is the best mediator for 144 target eQTL and contains a local eQTL with allele effects matching the 3:5 split observed for the hotspot targets.

The hotspot on chromosome 13 contains target eQTL overrepresentated for genes involved in skeletal system development, bone development and extracellular matrix organization.
Target eQTL allele effects show a 3:5 pattern where the laboratory strains NZO group with the wild-derived strains CAST and PWK while the laboratory strains A/J, B6, 129, and NOD group with the wild-derived strain WSB.
*Slc30a5* is the top candidate regulator where it is the best mediator for 187 target eQTL.
In addition, the hotspot on chromosome 13 overlaps with the QTL identified in relation to limb bud stage and shares *Slc30a5* as the best mediator.

**Still to add: association mapping + look for SNPs that match the splits near the top candidate mediators. Also add the MGI phenotypes I got from enrichr.**

```{r get_trans_bands}
#| warning: false
#| message: false


# eQTL map for Palate data
# prep the objects
map_dat2$chromF <- factor(map_dat2$chrom, levels = c(as.character(1:19), "X"))
chrom_markers <- select(map_dat2, chromF, n) %>%
  rename(chrom = chromF) %>%
  group_by(chrom) %>%
  summarize(start = min(n), end = max(n)) %>%
  GenomicRanges::GRanges()
windows <- unlist(GenomicRanges::slidingWindows(chrom_markers, width = 50, step = 10))
markers_bynum <- select(map_dat2, chrom, n) %>%
  dplyr::rename(start = n) %>%
  mutate(end = start) %>%
  GenomicRanges::GRanges()

distant_rna <- filter(peaks_annotated, lod > 8.23 & !local, !is.na(local) ) %>%
  select(peak_chr, interp_bp_peak) %>%
  dplyr::rename(chrom = peak_chr, end = interp_bp_peak) %>%
  mutate(start = end) %>%
  GenomicRanges::GRanges()
distant_rna_sugg <- filter(peaks_annotated, lod > 7, !is.na(local) , !local) %>%
  select(peak_chr, interp_bp_peak) %>%
  dplyr::rename(chrom = peak_chr, end = interp_bp_peak) %>%
  mutate(start = end) %>%
  GenomicRanges::GRanges()

markers <- select(map_dat2, chrom, pos_bp) %>%
  dplyr::rename(start = pos_bp) %>%
  mutate(end = start) %>%
  GenomicRanges::GRanges() # length 69,005
hotspot <- GenomicRanges::nearest(distant_rna, markers)
hotspot_sugg <- GenomicRanges::nearest(distant_rna_sugg, markers)

windows$distant_rna <- GenomicRanges::countOverlaps(windows, markers_bynum[hotspot])
windows$distant_rna_sugg <- GenomicRanges::countOverlaps(windows, markers_bynum[hotspot_sugg])

window_counts <- tibble(
  chrom = as.character(GenomicRanges::seqnames(windows)),
  start = GenomicRanges::start(windows),
  end = GenomicRanges::end(windows),
  distant_rna = windows$distant_rna, 
  distant_rna_sugg = windows$distant_rna_sugg
)

# plotting
map_dat2 <- map_dat2 %>% mutate( pos_cM = as.numeric(pos))
mm <- match(window_counts$start, map_dat2$n)
m2 <- match(window_counts$end, map_dat2$n)
window_counts$pos_cM_start <- map_dat2$pos_cM[mm]
window_counts$pos_bp_start <- map_dat2$pos_bp[mm]
window_counts$pos_cM_end <- map_dat2$pos_cM[m2]
window_counts$pos_bp_end <- map_dat2$pos_bp[m2]
window_counts <- window_counts %>%
  mutate(midpoint = (pos_cM_end + pos_cM_start) / 2, 4)

x <- select(window_counts, chrom, starts_with("pos_bp"), starts_with("distant")) %>%
  filter(
           distant_rna >= quantile(distant_rna,0.995) )
bands.rna <- x %>%
  rename(start = pos_bp_start, end = pos_bp_end) %>%
  GenomicRanges::GRanges() %>%
  GenomicRanges::reduce()
# reduce collapses overlapping windows into one big window. Works perfectly here.
bands.rna$distant_rna <- GenomicRanges::countOverlaps(bands.rna, distant_rna)
bands.rna$distant_rna_sugg <- GenomicRanges::countOverlaps(bands.rna, distant_rna_sugg)


```

::: panel-tabset

## Kinship

Here is the genetic relatedness between all the DO samples.

```{r kinship_matrix_plot}
#| warning: false
#| message: false
#| fig-height: 14
#| fig-width: 16

# plotting kinship matrix
# highlight the samples Ian wanted to look at closer
samples <- c("DO_13.5_MAX_16", 
                       "DO_13.5_MAX_38",
                       "DO_13.5_MAX_46",
                       "DO_13.5_MAX_47",
                       "DO_13.5_MAX_80",
                       "DO_13.5_MAX_83",
                       "DO_13.5_MAX_89")
highlight_samples <- sample_annot |> 
  mutate( label = ifelse( sample %in% samples, sample, "")) |> 
  select(label, sample) |> 
  column_to_rownames("sample")

pheatmap(kinship_palate,
         labels_row = highlight_samples[rownames(kinship_palate),],
         labels_col = highlight_samples[colnames(kinship_palate),]
         )
  

```


## Heritability of transcript abundance

```{r herit_plot}
#| warning: false
#| message: false
#| fig-width: 8
#| fig-height: 4


# plot heritability histogram
herit_palate %>%
  as_tibble(rownames= "gene_id") %>%
  left_join( all_genes_palate) %>%
  ggplot()+
  aes(
    x = value
    )+
  geom_histogram( alpha = 0.6, binwidth  = 0.01)+
  theme_pubclean(base_size = 14)+
  ylab("") +
  xlab("Heritability of transcript abundance")

```

## eQTL map

```{r eqtl_map}
#| warning: false
#| message: false
#| fig-width: 7
#| fig-height: 10


peaks_annotated$cumsum_bp_peak <- peaks_annotated$interp_bp_peak + chrom_lens_offset[peaks_annotated$peak_chr]
peaks_annotated$cumsum_bp_gene <- peaks_annotated$midpoint + chrom_lens_offset[peaks_annotated$chromosome]

chroms <-names(chrom_lens)
chrom_segments <- tibble( start = 0, 
                          end = chrom_lens,
                          chr = chroms,
                          type = as.character(rep(c(0,1),10)))
chrom_segments$start <- chrom_segments$start+ chrom_lens_offset[chrom_segments$chr]
chrom_segments$end <- chrom_segments$end+ chrom_lens_offset[chrom_segments$chr]

eqtl_map <- ggplot()+
  geom_rect( data = chrom_segments, aes( xmin =start, xmax = end, ymin = 0, ymax = max(end), fill = type), 
             inherit.aes = FALSE, alpha = 0.2, show.legend = FALSE)+
  scale_fill_manual(values = c("dark gray","white"))+
  geom_point(data = peaks_annotated %>% 
            filter( lod > 8.23), 
            aes( x = cumsum_bp_peak, y = cumsum_bp_gene),
            size = 2, 
            col = strain_colors[[3]],
             inherit.aes = FALSE )+
  theme_pubclean(base_size = 16)+
  scale_x_discrete( name = "eQTL peak",
                    limits = chrom_lens_midpt, 
                    labels = names(chrom_lens), 
                    expand = expansion( mult = 0.02))+
  scale_y_discrete( name = "Gene midpoint",limits = chrom_lens_midpt, labels = names(chrom_lens), expand = expansion( mult = 0.02))+
  theme( axis.text = element_text(size = 10),
          panel.grid.major.x = element_blank(),
          panel.grid.major.y = element_blank()) 

eqtl_counts <- bands.rna %>% 
  as_tibble() %>% 
  select( chrom = seqnames, start, end, distant_rna) %>% 
  mutate( hotspot_midpoint = (start+end)/2 ) %>% 
  # adding all the marker locations to match axes
  rbind( (map_dat2 %>% 
              select( chrom, start = pos_bp, end =pos_bp) %>% 
              mutate( distant_rna = 0,
                      hotspot_midpoint = start))) %>% 
  mutate( chrom = factor(chrom, levels = c(seq(1:19),"X")) ) 

# adding all the markers with 0 hotspot values to match the axes
eqtl_counts$midpoint_offset <- eqtl_counts$hotspot_midpoint + chrom_lens_offset[eqtl_counts$chrom]

trans_band_plot <- eqtl_counts %>% 
  ggplot()+
  aes( x = midpoint_offset, 
       y = distant_rna)+
  geom_bar( stat = "identity", width = 100, col =strain_colors[[3]], fill= strain_colors[[3]] )+
  theme_pubclean(base_size = 16)+
  scale_x_continuous( name = "Chr",
                      breaks = chrom_lens_midpt, 
                      labels = names(chrom_lens), expand = expansion(mult = .02) )+
  xlab("")+
  ylab("# of distant eQTL")+
  theme( axis.text = element_text(size = 10)) 


eqtl_map_plot <- ggarrange( eqtl_map, trans_band_plot, nrow = 2, heights = c(0.7, 0.3))

# ggsave(npc_eqtl_map_plot, filename = here("figures","figure3a.svg"), width = 8, height = 11, dpi = 300, units = "in")
eqtl_map_plot

```

## List of eQTL

Here is a full list of significant eQTL with annotations.

```{r eqtl_table}
#| warning: false
#| message: false


peaks_annotated %>% 
  filter( lod > 8.23) %>% 
  mutate( local = ifelse( local , "Local", "Distant")) %>% 
  select(`Ensembl Gene ID` = gene_id, 
         `Gene symbol` = symbol, 
         `Gene chr` = chromosome,
         `LOD`=lod, 
         `QTL chr` = peak_chr, 
         `QTL pos (cM)`= peak_cM, 
         `QTL pos (bp)`= interp_bp_peak, 
         `Gene midpoint (bp)` = midpoint,
         `QTL type` = local ) %>% 
  mutate_if(is.numeric, round, 2) %>% 
  create_dt()

```

## eQTL Hotspots

Here is a list of all distant eQTL hotspots.
We use the significant QTL threshold to call the boundaries and then the suggestive threshold to characterize the targets within each hotspot.

```{r transband_table}

bands.rna  %>% 
  as_tibble() %>% 
  mutate( chr = seqnames) -> bands.rna

bands.rna %>% 
    #filter(distant_rna > 20)  %>% 
  select( Chromosome = seqnames, `Start (bp)`=start, `End (bp)`=end, `# of distant eQTL (LOD > 8.23)` = distant_rna, 
          `# of distant eQTL (LOD > 7)` = distant_rna_sugg) %>% 
  create_dt()

```

```{r load_meds}
#| warning: false
#| message: false

# load + merge mediation results for all eQTL peak lod >7
med_files <- list.files("/projects/munger-lab/projects/palate-project-murray-munger/qtl_mapping/meds/", full.names = T)
load(med_files[1])
res <- results
for(i in 2:length(med_files)){
    load(med_files[i])
    res <- rbind(res, results)
}
palate_meds <- res
rm(res)

# get meds and remove the large res object to save memory
# Chr 2 & 13 are the main ones I would like to look into
chr2.eQTL1 <- peaks_annotated %>%
  filter( peak_chr == 2 &
            lod > 7 &
            !local &
            interp_bp_peak >= filter( bands.rna,chr==2)$start[1] &
            interp_bp_peak <= filter( bands.rna,chr==2)$end[1]
  )
chr2_eqtl_meds <- palate_meds %>% 
  inner_join( chr2.eQTL1 %>%  
                select( target_id = gene_id,
                        qtl_chr = peak_chr,
                        target_pos = interp_bp_peak,
                        target_chr = chromosome)
              )

# Chr 13
chr13.eQTL1 <- peaks_annotated %>%
  filter( peak_chr == 13 &
            lod > 7 &
            !local &
            interp_bp_peak >= filter( bands.rna,chr==13)$start[1] &
            interp_bp_peak <= filter( bands.rna,chr==13)$end[1]
  )
chr13_eqtl_meds <- palate_meds %>% 
  inner_join( chr13.eQTL1 %>%  
                select( target_id = gene_id,
                        qtl_chr = peak_chr,
                        target_pos = interp_bp_peak,
                        target_chr = chromosome)
              )


rm(palate_meds)

```


### Chr 2

```{r chr2_band}
#| warning: false
#| message: false

chr2.eQTL1 <- peaks_annotated %>% 
  filter( peak_chr == 2 &
            lod > 7 & 
            !local &
            interp_bp_peak >= filter( bands.rna,chr==2)$start[1] & 
            interp_bp_peak <= filter( bands.rna,chr==2)$end[1] 
          ) 
```

We identified a `r round(filter( bands.rna,chr==2)$width/1e06,2)` Mb wide eQTL hotspot on chromosome 2 between `r formatC(filter( bands.rna,chr==2)$start,big.mark=",")`-`r formatC(filter( bands.rna,chr==2)$end,big.mark=",")` bp that contains `r nrow(chr2.eQTL1)` suggestive eQTL (LOD \> 7).
Target genes within the hotspot show an overrepresentation for genes involved in chromatin remodeling and nervous system development.
Inferred founder allele effects of the target eQTL show a 3:5 pattern where laboratory strains B6, 129 and NZO group together while all the wild derived strains group with the laboratory strains NOD and A/J.
Top candidate mediator is *Trp53bp1* which is the best mediator for 144 target eQTL.

::: panel-tabset
#### ORA results

```{r chr2_ora}
#| warning: false
#| message: false

g.chr2 <- gost(query =  unique(chr2.eQTL1$symbol),
                        organism = "mmusculus", 
                        domain_scope = "custom", 
                        custom_bg = all_genes_palate$symbol, 
                        evcodes = TRUE)
g.chr2$result <- g.chr2$result %>% filter(term_size < 500)

```

```{r chr2_ora_plot}
#| eval: false
gostplot(g.chr2, capped = F)

```

```{r chr2_ora_table}

g.chr2$result %>% 
  select( term_name, source, FDR = p_value, term_size, intersection_size,intersection) %>% 
  filter( FDR <0.01) %>% 
  mutate_if( is.numeric, formatC, digits =2) %>% 
  create_dt()

```

#### Haplotype effects

```{r chr2_effs}
#|warning: false
#|message: false
#|fig-width: 10
#|fig-height: 8

chr2.eQTL1_mat <- chr2.eQTL1 %>% 
  filter(!is.na(A)) %>% 
  select(LETTERS[1:8],"symbol") %>% 
  distinct() %>%
  column_to_rownames("symbol") %>%
  as.matrix() %>% 
  t()

annotation_row <- data.frame(strain=c("AJ","B6","129","NOD","NZO","CAST","PWK","WSB"))
rownames(annotation_row) <- rownames(chr2.eQTL1_mat)  

annot.colors <- list(strain = founder_colors)

# svg(filename = here("figures","chr1_hotspot_allele_eff.svg"),width = 800, height = 600)
pheatmap(chr2.eQTL1_mat,
         cluster_rows=T,
         show_rownames=FALSE,
         cluster_cols=T, 
         show_colnames = FALSE, 
         clustering_method = "complete",
         scale="none",
         clustering_distance_cols="correlation",
         clustering_distance_rows="correlation",
         annotation_row = annotation_row, 
         annotation_colors = annot.colors, 
         cutree_rows = 2)

```

#### Mediation results

```{r chr2_meds_ranked}
#| warning: false
#| message: false
#| results: hide
#| eval: true

chr2_eqtl_meds_filt <- chr2_eqtl_meds %>% 
  left_join( all_genes_palate %>% 
               select( target = symbol, 
                       target_id =gene_id 
                       )
             ) %>%
  select(
    target,
    qtl_chr,
    qtl_lod,
    target_pos,
    target_chr,
    mediator_id, 
    mediator,
    mediator_chr, 
    mediator_midpoint ,
    mediation_lod = LOD
  ) %>% 
  group_by( target, qtl_chr, qtl_lod, target_chr) %>% 
  mutate( scaled_LOD = scale(mediation_lod)) %>% 
  filter( abs(target_pos-mediator_midpoint) <= 10e6 &   # filter within 10Mb
            qtl_chr == mediator_chr
          #scaled_LOD < -4 # z threshold -4
  )

chr2_eqtl_meds_filt %>% 
  mutate(mediation_lod = ifelse(target == mediator, NA, mediation_lod)) %>%
  mutate(lod_drop = qtl_lod - mediation_lod) %>%
  group_by(target) %>%
  arrange(mediation_lod) %>%
  mutate(rank = rep(seq(1:n()))) -> chr2.meds.ranked

chr2.meds.ranked.sum <- chr2.meds.ranked %>%
  filter(rank %in% c( 1)) %>% 
  group_by(mediator) %>%
  summarize(n = length(target), min_drop = min(lod_drop, na.rm = T), max_drop = max(lod_drop, na.rm = T), med_drop = median(lod_drop, na.rm = T)) %>%
  arrange(desc(n))

chr2.meds.ranked.sum

```


```{r chr2_meds_plot}
#| warning: false
#| message: false
#| fig-width: 6
#| fig-height: 24

results <- chr2.meds.ranked %>%
  ungroup() %>%
  select(mediator, target, mediation_lod, qtl_lod, lod_drop, mediator_midpoint, target_pos) %>%
  select(-mediation_lod, -qtl_lod) %>%
  filter((mediator %in% str_c(chr2.meds.ranked.sum$mediator[1:5]))) %>%
  mutate(lod_drop = ifelse(lod_drop < 0, 0, lod_drop), lod_drop = ifelse(lod_drop > 6, 6, lod_drop)) %>%
  arrange(mediator_midpoint) %>% 
  mutate( xlabel = as_factor(mediator)) %>% 
  arrange(target_pos) %>% 
  mutate( ylabel = as_factor(target)) 

p <- ggplot(results, aes(x = xlabel, y = ylabel)) +
  geom_point(aes(color =lod_drop, size = exp(lod_drop) / 30), alpha = 0.6) +
  scale_color_gradientn(
    colors = c("white", "firebrick3", "navy"),
    values = scales::rescale(c(0, 3, 6)),
    name = "LOD\ndifference", limits = c(0, 6)
  ) +
  scale_size(breaks = 0:6, labels = as.character(0:6), range = c(0, 8)) +
  guides(size = "none") +
  theme_pubclean(base_size = 18) +
  theme(
    axis.text.y = element_text(size = 4, hjust = 1),
    axis.ticks = element_blank(),
    axis.text.x = element_text(size = 12, angle = 15),
    axis.title = element_text(size = 14),
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16),
    legend.position = "right",
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank()
  ) +
  ylab("Target eQTL")+
  xlab("Mediator")

p

```

#### Top candidate mediators

```{r chr2_med_dets}
#| message: false
#| warning: false


candidate_peaks_chr2 <- peaks_annotated %>% filter( symbol %in% chr2.meds.ranked.sum$mediator[1], peak_chr == 2)

# add lod + effect plots of the local eQTL peaks for the top candidate mediators
# the effects are already there but need to run the qtl scan for the lod plot

# LOD plot
chr2_qtl_scan <- scan1( pheno = exprZ[,candidate_peaks_chr2$gene_id,drop=FALSE], 
                   genoprobs = genoprobs, 
                   kinship = kinship_loco,
                   addcovar = covar[,"sex",drop =F])

chr2_cand_qtl_scans <- chr2_qtl_scan %>% 
  as.data.frame( ) %>% 
  rownames_to_column("marker") %>% 
  rename( "Trp53bp1" = `ENSMUSG00000043909`) %>% 
  mutate( marker = dimnames(chr2_qtl_scan)[[1]]) %>% 
  left_join(map_dat2) 

chr2_lod_plot <- chr2_cand_qtl_scans %>% 
  filter( chr == candidate_peaks_chr2$peak_chr[1]) %>% 
  pivot_longer( cols = c("Trp53bp1"), names_to = "symbol", values_to = "lod") %>%
  ggplot()+
  aes( 
    x= pos_bp/1e06,
    y = lod,
    col = symbol
  )+
  geom_rect(  xmin =filter( bands.rna,chr==2)$start[1]/1e06, 
              xmax = filter( bands.rna,chr==2)$end[1]/1e06, 
              ymin = 0, 
              ymax = 25, 
              fill = "gray", 
              inherit.aes = FALSE, 
              alpha = 0.1, 
              show.legend = FALSE)+
  geom_line( size = 1.5, alpha = 0.8)+
  geom_segment( x = candidate_peaks_chr2$start/1e06, xend = candidate_peaks_chr2$end/1e06 , y = 0, yend = 1, size = 2, aes(col = symbol)) +
  annotate( "text", x= candidate_peaks_chr2$midpoint/1e06, y = -0.8, label ="Trp53bp1", size =4, fontface = "italic")+
  theme_pubclean( base_size = 18)+
  color_palette("jco")+
  xlab(paste0("Chr ",candidate_peaks_chr2$peak_chr[1]," location (Mbp)"))+
  ylab( "LOD score")+
  labs(col = "Gene")+
  annotate( "text", x= 10+filter( bands.rna,chr==2)$end[1]/1e06, y = 8, label ="eQTL \n Hotspot", size =5)+
  ylim(-1,10)+
  xlim(50,125)



# Effects plot
chr2_eff_plot <- candidate_peaks_chr2 %>% 
  select(LETTERS[1:8],symbol) %>% 
  pivot_longer( cols = LETTERS[1:8],
                names_to = "effect",
                values_to = "value"
  ) %>% 
  mutate( effect = case_when( effect == "A" ~ "AJ",
                              effect == "B" ~ "B6",
                              effect == "C" ~ "129",
                              effect == "D" ~ "NOD",
                              effect == "E" ~ "NZO",
                              effect == "F" ~ "CAST",
                              effect == "G" ~ "PWK",
                              effect == "H" ~ "WSB")) %>% 
  mutate( symbol = factor( symbol, levels = c("Trp53bp1"))) %>% 
  ggplot()+
  aes( x = effect,
       y = value, 
       col = symbol,
       group = symbol)+
  geom_point(size = 4, show.legend = FALSE)+
  geom_line(show.legend = T, size = 1.2)+
  theme_pubclean(base_size = 18)+
  color_palette("jco")+
  ylab("Haplotype effects")+
  xlab("")+
  #ylim(-2,1.1)+
  geom_hline( yintercept = 0)+
  theme(axis.line.x = element_blank(),
        axis.title = element_text(size = 18))+
  labs(col ="Gene")+
  coord_flip( clip ="off")+
  theme(legend.position = "none") 

```

```{r chr2_med_dets_plot}
#| fig-width: 12
#| fig-height: 5
#| message: false
#| warning: false

ggarrange( chr2_lod_plot, chr2_eff_plot,  widths = c(1, 0.5))

```

#### Mapping with PC1 of the target eQTL

```{r chr2_pca_mapping}

# PC1 from chr2 targets
chr2_pca <- prcomp(
  t(expr[ chr2.eQTL1$gene_id,, drop = F]), 
  center = T, scale. = T  
)
chr2_pc1_rankz <- apply(chr2_pca$x[,"PC1", drop=FALSE],2, rankZ)

chr2_pc1_qtl <- scan1(pheno = chr2_pc1_rankz,
                      genoprobs = genoprobs,
                      kinship = kinship_loco,
                      addcovar = covar
)
                
chr2_pc1_qtl_eff <- scan1blup(pheno = chr2_pc1_rankz,
                      genoprobs = genoprobs[,"2"],
                      kinship = kinship_loco[["2"]],
                      addcovar = covar
)

chr2_pc1_peak <- find_peaks(chr2_pc1_qtl, threshold = 8, pmap) |> filter(chr ==2)


marker   <- map_dat2 %>% filter(pos_bp == chr2_pc1_peak$pos)
geno     <- pull_genoprobpos(genoprobs,marker$marker)


chr2_pc1_med <- mediation.scan(
  target= chr2_pc1_rankz,
  mediator = exprZ,
  annotation = all_genes_palate |> 
    mutate( chromosome = ifelse( chromosome =="MT","M",chromosome)) |> 
    mutate(chr=chromosome,pos=midpoint),
  covar =  covar,
  qtl.geno = geno, 
  verbose=FALSE
  ) 

chr2_pc1_med <- chr2_pc1_med |> 
    mutate(target   = "PC1",
           peak_chr = "2") %>% 
    mutate("mediator"="symbol") 


```

```{r chr2_pc1_qtl}
    
plot_coefCC(chr2_pc1_qtl_eff, scan1_output =chr2_pc1_qtl, map = pmap )

```


```{r chr2_pc1_lod_plot}
#| warning: false
#| message: false
#| fig-width: 12
#| fig-height: 5
chr2_pc1_lod_plot <- chr2_pc1_qtl %>% 
  as_tibble( rownames = "marker") |> 
  left_join(map_dat2) |> 
  filter( chr == chr2_pc1_peak$chr) %>% 
  mutate( type = "Chr2 PC1") |> 
  ggplot()+
  aes( 
    x= pos_bp/1e06,
    y = PC1,
    col = type
  )+
  geom_rect(  xmin =filter( bands.rna,chr==2)$start[1]/1e06, 
              xmax = filter( bands.rna,chr==2)$end[1]/1e06, 
              ymin = 0, 
              ymax = 25, 
              fill = "gray", 
              inherit.aes = FALSE, 
              alpha = 0.1, 
              show.legend = FALSE)+
  geom_line( size = 1.5)+
  theme_pubclean( base_size = 18)+
  color_palette("jco")+
  xlab(paste0("Chr ",chr2_pc1_peak$chr," location (Mbp)"))+
  ylab( "LOD score")+
  labs(col = "Gene")+
  annotate( "text", x= 6+filter( bands.rna,chr==2)$end[1]/1e06, y = 8, label ="eQTL \n Hotspot", size =5)+
  ylim(0,15)+
  xlim(50,130)+
  theme(legend.position = "none")



# Effects plot
chr2_pc1_peak_n <- map_dat2 |> filter( pos_bp == chr2_pc1_peak$pos)
# chr2_pc1_peak$before <- (map_dat2 |> filter( n == chr2_pc1_peak_n$n-1))$marker
# chr2_pc1_peak$after <- (map_dat2 |> filter( n == chr2_pc1_peak_n$n+1))$marker

chr2_pc1_eff_plot <- chr2_pc1_qtl_eff[chr2_pc1_peak_n$marker,LETTERS[1:8]] %>% 
  t() |> 
  as_tibble() |> 
  pivot_longer( cols = LETTERS[1:8],
                names_to = "effect",
                values_to = "value"
  ) %>% 
  mutate( effect = case_when( effect == "A" ~ "AJ",
                              effect == "B" ~ "B6",
                              effect == "C" ~ "129",
                              effect == "D" ~ "NOD",
                              effect == "E" ~ "NZO",
                              effect == "F" ~ "CAST",
                              effect == "G" ~ "PWK",
                              effect == "H" ~ "WSB"),
          name = "PC1") |> 
    mutate( effect = factor(effect, levels =c("WSB","AJ","NOD","PWK","CAST","NZO","129","B6"))) |> 
  ggplot()+
  aes( x = effect,
       y = value,
       group = name,
       col = name)+
  geom_point(size = 4, show.legend = FALSE)+
  geom_line(show.legend = T, size = 1.2)+
  theme_pubclean(base_size = 18)+
  color_palette("jco")+
  ylab("Haplotype effects")+
  xlab("")+
  #ylim(-2,1.1)+
  geom_hline( yintercept = 0)+
  theme(axis.line.x = element_blank(),
        axis.title = element_text(size = 18))+
  labs(col ="Gene")+
  coord_flip( clip ="off")+
  theme(legend.position = "none")

chr2_pc1_peak_plot <- ggarrange( chr2_pc1_lod_plot, chr2_pc1_eff_plot,  widths = c(1, 0.5))
chr2_pc1_peak_plot

# ggsave(filename = here("_figures/chr2_eQTL_hotspot_PC1_peak_plot.png"), plot = chr2_pc1_peak_plot, width = 12, height = 5, units = "in")

```

Mediation results:

```{r}

# ggplotly(kplot(chr2_pc1_med)+
#   theme_pubclean()+
#     theme(legend.position = "none"))

chr2_pc1_med |> 
  mutate( qtl_pos = chr2_pc1_peak$pos, qtl_chr = chr2_pc1_peak$chr, qtl_lod = chr2_pc1_peak$lod) %>% 
  mutate( scaled_LOD = scale(LOD)) %>% 
  filter( abs(qtl_pos-midpoint) <= 10e6 &   # filter within 10Mb
            qtl_chr == chr
  ) %>% 
  arrange( LOD) %>% 
  head(5) %>% 
  arrange(midpoint) %>% 
  select( symbol, chr, qtl_lod, mediation_lod = LOD, qtl_pos, pos) %>% 
  mutate_if( is.numeric, round, 2) %>% 
  create_dt()

```

Association mapping:
```{r chr2_pc1_as}
#| warning: false
#| message: false
pmap_Mbp <- lapply( pmap, function(x){x/1e06})
attr(genoprobs, "is_x_chr") <- NULL

chr2_pc1_as <- scan1snps(genoprobs = genoprobs,
                     map = pmap_Mbp,
                     pheno = chr2_pc1_rankz,
                     kinship = kinship_loco[[chr2_pc1_peak$chr]],
                     addcovar = covar,
                     chr = as.character(chr2_pc1_peak$chr),
                     query_func = query_variants,
                     start = chr2_pc1_peak$pos/1e06 - 5,
                     end = chr2_pc1_peak$pos/1e06 + 5,
                     keep_all_snps = T
                     )
genes <- query_genes( chr2_pc1_peak$chr,
                      chr2_pc1_peak$pos/1e06 - 5,
                      chr2_pc1_peak$pos/1e06 + 5) %>%
  distinct()

```

```{r chr2_pc1_as_plot}
#| warning: false
#| message: false
#| fig-width: 16
#| fig-height: 8

par(mar=c(4.1, 4.1,2, 1))

plot(chr2_pc1_as$lod,
     chr2_pc1_as$snpinfo,
     drop_hilit = 1,
     genes = genes,
     xlim=c(110,114))


```

SNPs with high LODs:

```{r chr2_pc1_as_table}
#| warning: false
#| message: false
chr2_pc1_as$lod |> 
  as.data.frame( ) |> 
  rownames_to_column("snp_id") |> 
  left_join( chr2_pc1_as$snpinfo) |> 
  filter( PC1 > 6) |> 
  select( LOD = PC1,
          snp_id ,
          pos ,
          alleles, 
          consequence ,
          gene_id = ensembl_gene ,
          `129` = `129S1_SvImJ`,
          `AJ` = A_J,
          `CAST` = CAST_EiJ,
          `NZO` = NZO_HlLtJ,
          `PWK` = PWK_PhJ,
          `B6` = C57BL_6J,
          `NOD` = NOD_ShiLtJ,
          `WSB` = WSB_EiJ
          )  |> 
  # filter( `129`==`B6`, B6==NZO & 
  #         NOD==AJ, AJ==WSB , CAST == NOD, NOD == PWK) |> 
  left_join( all_genes_palate |> 
               select(gene_id, symbol) ,
             by = c("gene_id")) |> 
  mutate_if(is.numeric, round, 2) |> 
  create_dt()


```

:::


### Chr 13

```{r chr13_band}
#| warning: false
#| message: false

chr13.eQTL1 <- peaks_annotated %>% 
  filter( peak_chr == 13 &
            lod > 7 & 
            !local &
            interp_bp_peak >= filter( bands.rna,chr==13)$start[1] & 
            interp_bp_peak <= filter( bands.rna,chr==13)$end[1] 
  ) 

```

We identified a `r round(filter( bands.rna,chr==13)$width/1e06,2)` Mb wide eQTL hotspot on chromosome 13 between `r formatC(filter( bands.rna,chr==13)$start,big.mark=",")`-`r formatC(filter( bands.rna,chr==13)$end,big.mark=",")` bp that contains `r nrow(chr13.eQTL1)` suggestive eQTL (LOD \> 7).
Target genes within the hotspot do not show an overrepresentation for genes involved in skeletal system development, bone development and extracellular matrix organization.
Inferred founder allele effects of the target eQTL show a 3:5 pattern where the laboratory strains NZO group with the wild-derived strains CAST and PWK while the laboratory strains A/J, B6, 129, and NOD group with the wild-derived strain WSB.
*Slc30a5* is the top candidate regulator where it is the best mediator for 187 target eQTL.

::: panel-tabset
#### ORA results

```{r chr13_ora}
#| warning: false
#| message: false


g.chr13 <- gost(query =  unique(chr13.eQTL1$symbol),
                        organism = "mmusculus", 
                        domain_scope = "custom", 
                        custom_bg = all_genes_palate$symbol, 
                        evcodes = TRUE)
g.chr13$result <- g.chr13$result %>% filter(term_size < 500)

```

```{r chr13_ora_plot}
#| warning: false
#| message: false
#| eval: false
gostplot(g.chr13, capped = F)

```

```{r chr13_ora_table}

g.chr13$result %>% 
  select( term_name, source, FDR = p_value, term_size, intersection_size,intersection) %>% 
  filter( FDR <0.01) %>% 
  mutate_if( is.numeric, formatC, digits =2) %>% 
  create_dt()

```

#### Haplotype effects

```{r chr13_effs}
#|warning: false
#|message: false
#|fig-width: 10
#|fig-height: 8

chr13.eQTL1_mat <- chr13.eQTL1 %>% 
  filter(!is.na(A)) %>% 
  select(LETTERS[1:8],"symbol") %>% 
  distinct() %>%
  column_to_rownames("symbol") %>%
  as.matrix() %>% 
  t()

annotation_row <- data.frame(strain=c("AJ","B6","129","NOD","NZO","CAST","PWK","WSB"))
rownames(annotation_row) <- rownames(chr13.eQTL1_mat)  

annot.colors <- list(strain = founder_colors)

# svg(filename = here("figures","chr1_hotspot_allele_eff.svg"),width = 800, height = 600)
pheatmap(chr13.eQTL1_mat,
         cluster_rows=T,
         show_rownames=FALSE,
         cluster_cols=T, 
         show_colnames = FALSE, 
         clustering_method = "complete",
         scale="none",
         clustering_distance_cols="correlation",
         clustering_distance_rows="correlation",
         annotation_row = annotation_row, 
         annotation_colors = annot.colors, 
         cutree_rows = 2)

```

#### Mediation results


```{r chr13_meds_updated}
#| warning: false
#| message: false
#| results: hide
chr13_eqtl_meds_filt <- chr13_eqtl_meds |> 
  left_join( all_genes_palate %>% 
               select( target = symbol, 
                       target_id =gene_id 
                       )
             ) %>%
  select(
    target,
    qtl_chr,
    qtl_lod,
    target_pos,
    target_chr,
    mediator_id, 
    mediator,
    mediator_chr, 
    mediator_midpoint ,
    mediation_lod = LOD
  ) %>% 
  group_by( target, qtl_chr, qtl_lod, target_chr) %>% 
  mutate( scaled_LOD = scale(mediation_lod)) %>% 
  filter( 
    # between(mediator_midpoint, filter( bands.rna,chr==13)$start[1]-10e06, filter( bands.rna,chr==13)$end[1]+10e06),
    abs(target_pos-mediator_midpoint) <= 10e6 &   # filter within 10Mb
            qtl_chr == mediator_chr
          #scaled_LOD < -4 # z threshold -4
  )

chr13_eqtl_meds_filt %>% 
  mutate(mediation_lod = ifelse(target == mediator, NA, mediation_lod)) %>%
  mutate(lod_drop = qtl_lod - mediation_lod) %>%
  group_by(target) %>%
  arrange(mediation_lod) %>%
  mutate(rank = rep(seq(1:n()))) -> chr13.meds.ranked

chr13.meds.ranked.sum <- chr13.meds.ranked %>%
  filter(rank %in% c( 1)) %>% 
  group_by(mediator) %>%
  summarize(n = length(target), min_drop = min(lod_drop, na.rm = T), max_drop = max(lod_drop, na.rm = T), med_drop = median(lod_drop, na.rm = T)) %>%
  arrange(desc(n))

chr13.meds.ranked.sum

```

```{r chr13_meds_plot}
#| warning: false
#| message: false
#| fig-width: 6
#| fig-height: 18

results <- chr13.meds.ranked %>%
  ungroup() %>%
  select(mediator, target, mediation_lod, qtl_lod, lod_drop, mediator_midpoint, target_pos) %>%
  select(-mediation_lod, -qtl_lod) %>%
  filter((mediator %in% str_c(chr13.meds.ranked.sum$mediator[1:5]))) %>%
  mutate(lod_drop = ifelse(lod_drop < 0, 0, lod_drop), lod_drop = ifelse(lod_drop > 6, 6, lod_drop)) %>%
  arrange(mediator_midpoint) %>% 
  mutate( xlabel = as_factor(mediator)) %>% 
  arrange(target_pos) %>% 
  mutate( ylabel = as_factor(target)) 

p <- ggplot(results, aes(x = xlabel, y = ylabel)) +
  geom_point(aes(color =lod_drop, size = exp(lod_drop) / 30), alpha = 0.6) +
  scale_color_gradientn(
    colors = c("white", "firebrick3", "navy"),
    values = scales::rescale(c(0, 3, 6)),
    name = "LOD\ndifference", limits = c(0, 6)
  ) +
  scale_size(breaks = 0:6, labels = as.character(0:6), range = c(0, 8)) +
  guides(size = "none") +
  theme_pubclean(base_size = 18) +
  theme(
    axis.text.y = element_text(size = 6, hjust = 1),
    axis.ticks = element_blank(),
    axis.text.x = element_text(size = 12, angle = 15),
    axis.title = element_text(size = 14),
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16),
    legend.position = "right",
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank()
  ) +
  ylab("Target eQTL")+
  xlab("Mediator")

p

```

#### Top candidate mediators

```{r chr13_med_dets}
#| eval: true
#| message: false
#| warning: false


candidate_peaks_chr13 <- peaks_annotated %>% filter( symbol %in% chr13.meds.ranked.sum$mediator[1], local ==T)

# add lod + effect plots of the local eQTL peaks for the top candidate mediators
# the effects are already there but need to run the qtl scan for the lod plot

# LOD plot
chr13_qtl_scan <- scan1( pheno = exprZ[,candidate_peaks_chr13$gene_id,drop=FALSE], 
                   genoprobs = genoprobs, 
                   kinship = kinship_loco,
                   addcovar = covar[,"sex",drop =F])

chr13_cand_qtl_scans <- chr13_qtl_scan %>% 
  as.data.frame( ) %>% 
  rename( "Slc30a5" = `ENSMUSG00000021629`) %>% 
  mutate( marker = dimnames(chr13_qtl_scan)[[1]]) %>% 
  left_join(map_dat2) 

chr13_lod_plot <- chr13_cand_qtl_scans %>% 
  filter( chr == candidate_peaks_chr13$peak_chr[1]) %>% 
  pivot_longer( cols = c("Slc30a5"), names_to = "symbol", values_to = "lod") %>% 
  mutate( symbol = factor( symbol, levels = c("Slc30a5"))) %>% 
  ggplot()+
  aes( 
    x= pos_bp/1e06,
    y = lod,
    col = symbol
  )+
  geom_rect(  xmin =filter( bands.rna,chr==13)$start[1]/1e06, 
              xmax = filter( bands.rna,chr==13)$end[1]/1e06, 
              ymin = 0, 
              ymax = 25, 
              fill = "gray", 
              inherit.aes = FALSE, 
              alpha = 0.1, 
              show.legend = FALSE)+
  geom_line( size = 1.5, alpha = 0.8)+
  geom_segment( x = candidate_peaks_chr13$start/1e06, xend = candidate_peaks_chr13$end/1e06 , y = 0, yend = 1, size = 2, aes(col=symbol)) +
  annotate( "text", x= candidate_peaks_chr13$midpoint/1e06, y = -0.8, label ="Slc30a5", size =4, fontface = "italic")+
  theme_pubclean( base_size = 18)+
  color_palette("jco")+
  xlab(paste0("Chr ",candidate_peaks_chr13$peak_chr[1]," location (Mbp)"))+
  ylab( "LOD score")+
  labs(col = "Gene")+
  annotate( "text", x= 6+filter( bands.rna,chr==13)$end[1]/1e06, y = 9, label ="eQTL \n Hotspot", size =5)+
  ylim(-1,10)+
  xlim(75,125)



# Effects plot
chr13_eff_plot <- candidate_peaks_chr13 %>% 
  select(LETTERS[1:8],symbol) %>% 
  pivot_longer( cols = LETTERS[1:8],
                names_to = "effect",
                values_to = "value"
  ) %>% 
  mutate( effect = case_when( effect == "A" ~ "AJ",
                              effect == "B" ~ "B6",
                              effect == "C" ~ "129",
                              effect == "D" ~ "NOD",
                              effect == "E" ~ "NZO",
                              effect == "F" ~ "CAST",
                              effect == "G" ~ "PWK",
                              effect == "H" ~ "WSB")) %>% 
  mutate( symbol = factor( symbol, levels = c("Slc30a5"))) %>% 
  ggplot()+
  aes( x = effect,
       y = value, 
       col = symbol,
       group = symbol)+
  geom_point(size = 4, show.legend = FALSE)+
  geom_line(show.legend = T, size = 1.2)+
  theme_pubclean(base_size = 18)+
  color_palette("jco")+
  ylab("Haplotype effects")+
  xlab("")+
  #ylim(-2,1.1)+
  geom_hline( yintercept = 0)+
  theme(axis.line.x = element_blank(),
        axis.title = element_text(size = 18))+
  labs(col ="Gene")+
  coord_flip( clip ="off")+
  theme(legend.position = "none") 

```

```{r chr13_med_dets_plot}
#| fig-width: 12
#| fig-height: 5
#| message: false
#| warning: false

ggarrange( chr13_lod_plot, chr13_eff_plot,  widths = c(1, 0.5))

```

#### Mapping with PC1 of the target eQTL

```{r chr13_pca_mapping}
#| warning: false
#| message: false


# PC1 from chr13 targets
chr13_pca <- prcomp(
  t(expr[ chr13.eQTL1$gene_id,, drop = F]), 
  center = T, scale. = T  
)
chr13_pc1_rankz <- apply(chr13_pca$x[,"PC1", drop=FALSE],2, rankZ)
chr13_pc1_qtl <- scan1(pheno = chr13_pc1_rankz,
                      genoprobs = genoprobs,
                      kinship = kinship_loco,
                      addcovar = covar
)
                
chr13_pc1_qtl_eff <- scan1blup(pheno = chr13_pc1_rankz,
                      genoprobs = genoprobs[,"13"],
                      kinship = kinship_loco[["13"]],
                      addcovar = covar
)

chr13_pc1_peak <- find_peaks(chr13_pc1_qtl, threshold = 8, pmap) |> filter(chr ==13)


marker   <- map_dat2 %>% filter(pos_bp == chr13_pc1_peak$pos)
geno     <- pull_genoprobpos(genoprobs,marker$marker)


chr13_pc1_med <- mediation.scan(
  target= chr13_pc1_rankz,
  mediator = exprZ,
  annotation = all_genes_palate |> 
    mutate( chromosome = ifelse( chromosome =="MT","M",chromosome)) |> 
    mutate(chr=chromosome,pos=midpoint),
  covar =  covar,
  qtl.geno = geno, 
  verbose=FALSE
  ) 

chr13_pc1_med <- chr13_pc1_med |> 
    mutate(target   = "PC1",
           peak_chr = "13") 

```

```{r chr13_pc1_loadings}
#| warning: false
#| message: false
#| eval: false

chr13_pc1_drivers <- chr13_pca$rotation[,"PC1", drop = FALSE] %>% 
  as_tibble( rownames = "id") %>% 
  left_join( all_genes_palate %>%  
               select(id, symbol)
             ) %>% 
  filter( (PC1) >= quantile((PC1), 0.9)|
          (PC1) <= quantile((PC1), 0.1)
          )


chr13_pca$rotation[,"PC1", drop = FALSE] %>% 
  as_tibble( rownames = "id") %>% 
  left_join( all_genes_palate %>%  
               select(id, symbol)
             ) |> 
  create_dt()
```

```{r chr13_pc1_qtl}
#| fig-width: 12
#| fig-height: 7


plot_coefCC(chr13_pc1_qtl_eff, scan1_output =chr13_pc1_qtl, map = pmap , xlim= c(1e08, 1.1e08), main = "PC1 of chr13 eQTL hotspots targets")
abline( v =chr13_pc1_peak$pos, col = "red", lwd = 2, lty = 2)
abline( v = filter( bands.rna,chr==13)$start[1], col = "blue", lwd = 2)
abline( v =filter( bands.rna,chr==13)$end[1], col = "blue", lwd = 2)
```

```{r chr13_pc1_lod_plot}
#| warning: false
#| message: false
#| fig-width: 12
#| fig-height: 5
chr13_pc1_lod_plot <- chr13_pc1_qtl %>% 
  as_tibble( rownames = "marker") |> 
  left_join(map_dat2) |> 
  filter( chr == chr13_pc1_peak$chr) %>% 
  mutate( type = "Chr13 PC1") |> 
  ggplot()+
  aes( 
    x= pos_bp/1e06,
    y = PC1,
    col = type
  )+
  geom_rect(  xmin =filter( bands.rna,chr==13)$start[1]/1e06, 
              xmax = filter( bands.rna,chr==13)$end[1]/1e06, 
              ymin = 0, 
              ymax = 25, 
              fill = "gray", 
              inherit.aes = FALSE, 
              alpha = 0.1, 
              show.legend = FALSE)+
  geom_line( size = 1.5)+
  theme_pubclean( base_size = 18)+
  color_palette("jco")+
  xlab(paste0("Chr ",chr13_pc1_peak$chr," location (Mbp)"))+
  ylab( "LOD score")+
  labs(col = "Gene")+
  annotate( "text", x= 6+filter( bands.rna,chr==13)$end[1]/1e06, y = 8, label ="eQTL \n Hotspot", size =5)+
  ylim(0,12)+
  xlim(60,120)+
  theme(legend.position = "none") 



# Effects plot
chr13_pc1_peak_n <- map_dat2 |> filter( pos_bp == chr13_pc1_peak$pos)
# chr13_pc1_peak$before <- (map_dat2 |> filter( n == chr13_pc1_peak_n$n-1))$marker
# chr13_pc1_peak$after <- (map_dat2 |> filter( n == chr13_pc1_peak_n$n+1))$marker

# note I am getting the effect at the peak!
chr13_pc1_eff_plot <- chr13_pc1_qtl_eff[chr13_pc1_peak_n$marker,LETTERS[1:8]] %>% 
  t() |> 
  as_tibble() |> 
  pivot_longer( cols = LETTERS[1:8],
                names_to = "effect",
                values_to = "value"
  ) %>% 
  mutate( effect = case_when( effect == "A" ~ "AJ",
                              effect == "B" ~ "B6",
                              effect == "C" ~ "129",
                              effect == "D" ~ "NOD",
                              effect == "E" ~ "NZO",
                              effect == "F" ~ "CAST",
                              effect == "G" ~ "PWK",
                              effect == "H" ~ "WSB"),
          name = "PC1") |> 
  mutate( effect = factor(effect, levels =c("WSB","B6","NOD","129","AJ","PWK","CAST","NZO"))) |> 
  ggplot()+
  aes( x = effect,
       y = value,
       group = name,
       col = name)+
  geom_point(size = 4, show.legend = FALSE)+
  geom_line(show.legend = T, size = 1.2)+
  theme_pubclean(base_size = 18)+
  color_palette("jco")+
  ylab("Haplotype effects")+
  xlab("")+
  #ylim(-2,1.1)+
  geom_hline( yintercept = 0)+
  theme(axis.line.x = element_blank(),
        axis.title = element_text(size = 18))+
  labs(col ="Gene")+
  coord_flip( clip ="off")+
  theme(legend.position = "none") 

chr13_pc1_peak_plot <- ggarrange( chr13_pc1_lod_plot, chr13_pc1_eff_plot,  widths = c(1, 0.5))
chr13_pc1_peak_plot
# ggsave(filename = here("_figures/chr13_eQTL_hotspot_PC1_peak_plot.png"), plot = chr13_pc1_peak_plot, width = 12, height = 5, units = "in")

```

Mediation results:

```{r}
#| warning: false
#| message: false
# ggplotly(kplot(chr13_pc1_med)+
#   theme_pubclean()+
#     theme(legend.position = "none"))

chr13_pc1_med |> 
  mutate( qtl_pos = chr13_pc1_peak$pos, qtl_chr = chr13_pc1_peak$chr, qtl_lod = chr13_pc1_peak$lod) %>% 
  mutate( scaled_LOD = scale(LOD)) %>% 
  filter( abs(qtl_pos-midpoint) <= 10e6 &   # filter within 10Mb
            qtl_chr == chr
  ) %>% 
  arrange( LOD) %>% 
  head(5) %>% 
  arrange(midpoint) %>% 
  select( symbol, chr, qtl_lod, mediation_lod = LOD, qtl_pos, pos) %>% 
  mutate_if( is.numeric, round, 2) %>% 
  create_dt()

```

Partial correlations:

```{r call_geno_at_13}

# the split is: CAST, NZO, PWK vs WSB, B6, NOD, 129, AJ
closest_geno <- function(p, tol = 0.01) { 
  if (sum(abs(p - c(1, 0))) < tol) {
    return("A")
  }
  if (sum(abs(p - c(0, 1))) < tol) {
    return("B")
  }
  if (sum(abs(p - c(0.5, 0.5))) < tol) {
    return("H")
  }
  return(NA)
}
call_geno_chr13 <- function(mat) {
  # mat is nsamp*8 (haps)
  # A = A_J
  # B = B6
  # C = 129
  # D = NOD
  # E = NZO
  # F = CAST
  # G = PWK
  # H = WSB
  # the split is: CAST, NZO, PWK vs WSB, B6, NOD, 129, AJ
  grp <- c("A", "A", "A", "A", "B", "B", "B", "A")
  collapsed <- apply(mat, 1, function(x) tapply(x, grp, sum))
  apply(collapsed, 2, closest_geno, tol = 0.05) # relaxing the tol to get genotype calls for all samples.
}
# PC1 qtl on chr13
probs <- genoprobs
markers <- tibble(name = dimnames(probs[[13]])[[3]]) %>%
  mutate(name2 = name) %>%
  separate(name2, into = c("chrom", "pos"), sep = "_", convert = TRUE)

mm <- filter(markers, chrom == chr13_pc1_peak$chr, 
             between(pos, chr13_pc1_peak$pos-.2e06,chr13_pc1_peak$pos+.03e06)
             )# 3 markers
probs_at_chr13 <- probs$`13`[, , mm$name]
geno_at_chr13 <- apply(probs_at_chr13, 3, call_geno_chr13)
# assert_that(noNA(probs3))
one <- geno_at_chr13[, 1] # marker left of peak
two <- geno_at_chr13[, 2] # closest marker to peak
three <- geno_at_chr13[, 3] # marker right of peak

# Get samples in group A (alt allele) and group B (ref allele)
alts <- rownames(probs[[13]])[one == "A" & two == "A" & three == "A"]
refs <- rownames(probs[[13]])[one == "B" & two == "B" & three == "B"]
hets <- rownames(probs[[13]])[one == "H" & two == "H" & three == "H"]

geno_at_chr13_tb <- tibble(
  chr13_geno = factor(
    c(rep("Ref",length(refs)), 
      rep("Alt",length(alts)),
      rep("Het",length(hets)))
    ),
  geno =  c(rep(0,length(refs)), 
      rep(1,length(alts)),
      rep(2,length(hets)))
,
  sampleid = c(refs, alts, hets)
    )
# 
# geno_at_chr13_tb |> 
#   filter(!is.na(sampleid)) |> 
#   #mutate( highlight = ifelse( sampleid %in% samples, TRUE, FALSE)) |> 
#   # filter( sampleid %in% samples)
#   count(chr13_geno)


cand_mediators <- all_genes_palate   |> 
  filter( 
    chromosome == 13, 
    abs(midpoint - chr13_pc1_peak$pos) < 10e06
    # midpoint >= filter( bands.rna,chr==13)$start[1]-5e06 , 
    # midpoint  <= filter( bands.rna,chr==13)$end[1]+5e06 
    )

get_pcor_for_meds <- function(x, random = FALSE){
  # x: gene name
  # it: # of iterations
  gene_dets <- all_genes_palate |> 
    filter( symbol == x) |> 
    slice_head(n = 1)
  gene <- gene_dets$symbol
  gene_pcor_table <- tibble(
    pc1 = chr13_pc1_rankz,
    !!gene := exprZ[rownames(exprZ),gene_dets$gene_id],
    sampleid = rownames(exprZ)
    ) |> 
    left_join(
      geno_at_chr13_tb
      )
  

  gene_pcor <- pcor(gene_pcor_table |> 
                      select(geno,pc1, !!gene) ,
                    method = "spearman")
  
  if(random == TRUE){
      gene_pcor <- pcor(gene_pcor_table |> 
                          mutate( rand = sample(gene_pcor_table[,gene,drop=T]) ) |> 
                          select(geno,pc1,rand) ,
                    method = "spearman")
  }
  
  return(gene_pcor)
    
}

get_null_pcor <- function(gene,it = 100){
  
  pcor_null <- c()
  for( i in 1:it){
    pcor_rand <- get_pcor_for_meds(gene, random = TRUE)  
    pcor_results <- tibble(
      mediator = gene,
      pcor = pcor_rand$estimate["pc1","rand"],
      p_value = pcor_rand$p.value["pc1","rand"]
    )
    pcor_null[[i]] <- pcor_results
    
  }
  return(pcor_null)
  
}
```

```{r pc1_valu_by_geno}
#| warning: false
#| message: false
chr13_pc1_rankz |> 
  as_tibble( rownames = "sampleid") |> 
  left_join(geno_at_chr13_tb) |> 
  left_join( sample_annot |> select(sampleid=sample, LB_stage)) |> 
  mutate( label = case_when(
    chr13_geno =="Alt"~"CAST group",
    chr13_geno =="Ref"~"B6 group",
    chr13_geno =="Het"~"Het"
  ),
  label = factor(label, levels = c("CAST group","Het","B6 group"))
  ) |> 
  ggplot()+
  aes(
    x = label,
    y = PC1,
    shape = label,
    col = LB_stage,
    fill=LB_stage,
    group = label
  )+
  geom_boxplot(width = 0.2)+
  geom_jitter(size = 3, alpha = 0.7)+
  #ylim(-3,3)+
  scale_color_viridis_c(direction = -1)+
  scale_fill_viridis_c(direction = -1)+
  theme_pubclean()+
  xlab("Genotype at Chr 13 locus")+
  ylab("PC1 for Chr13 eQTL hotspot targets")+
  stat_compare_means( inherit.aes = F, aes(group = label) ,comparisons = list(c("CAST group","Het"),
                                      c("Het","B6 group"),
                                      c("CAST group","B6 group")))+
  scale_shape_manual(values = c(21,22,23))+
  guides( color= "none",shape = "none")
  

  


```

```{r get_pcor}
#| warning: false
#| message: false
#| cache: true

pcor_results <-c()
for(gene in cand_mediators$symbol){
  
  pcor_gene <- get_pcor_for_meds(gene,  random = F)
  pcor_tb <-  tibble(
      mediator = gene,
      pcor = pcor_gene$estimate["pc1",gene],
      p_value = pcor_gene$p.value["pc1",gene]
    )
  pcor_results[[gene]] <- pcor_tb

  
}

pcor_null_results <-c()
for(gene in cand_mediators$symbol){
  
  pcor_null <- get_null_pcor(gene, it = 1000)
  pcor_null_tb <- pcor_null |> 
    enframe() |> 
    unnest()
  pcor_null_results[[gene]] <- pcor_null_tb
  
  
}

pcor_results_tb <- pcor_results |> 
  enframe() |> 
  unnest()

pcor_null_results_tb <- pcor_null_results |> 
  enframe() |> 
  unnest()



```


```{r pcor_fig}
#| warning: false
#| message: false
#| eval: true
#| fig-width: 12
#| fig-height: 10

to_plot <- pcor_results_tb |> 
  filter( p_value < 0.01) |> 
  left_join( all_genes_palate |> select(mediator = symbol, midpoint)) |> 
  arrange(midpoint) |> 
  mutate( label = factor(mediator, levels = unique(mediator)))

pcor_null_results_tb |> 
  filter(mediator %in% to_plot$mediator) |> 
  left_join( all_genes_palate |> select(mediator = symbol, midpoint)) |> 
  arrange(midpoint) |> 
  mutate( label = factor(mediator, levels = unique(mediator))) |> 
  ggplot()+
  aes( x = label, 
       y = pcor)+
  geom_violin()+
  geom_boxplot(width = 0.2)+
  theme_pubclean()+
  ylim( -1, 1)+
  ylab("Partial correlation (spearman)")+
  xlab("")+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.2, hjust = 0))+
  geom_point(data = to_plot, 
             col = "blue", 
             size = 3, 
             alpha = .6
             )
  

```


Association mapping:
```{r chr13_pc1_as}
#| warning: false
#| message: false
pmap_Mbp <- lapply( pmap, function(x){x/1e06})
attr(genoprobs, "is_x_chr") <- NULL

chr13_pc1_as <- scan1snps(genoprobs = genoprobs,
                     map = pmap_Mbp,
                     pheno = chr13_pc1_rankz,
                     kinship = kinship_loco[[chr13_pc1_peak$chr]],
                     addcovar = covar,
                     chr = as.character(chr13_pc1_peak$chr),
                     query_func = query_variants,
                     start = chr13_pc1_peak$pos/1e06 - 5,
                     end = chr13_pc1_peak$pos/1e06 + 5,
                     keep_all_snps = T
                     )
genes <- query_genes( chr13_pc1_peak$chr,
                      chr13_pc1_peak$pos/1e06 - 5,
                      chr13_pc1_peak$pos/1e06 + 5) %>%
  distinct()

```

```{r chr13_pc1_as_plot}
#| warning: false
#| message: false
#| fig-width: 16
#| fig-height: 8

par(mar=c(4.1, 4.1,2, 1))

plot(chr13_pc1_as$lod,
     chr13_pc1_as$snpinfo,
     drop_hilit = 1,
     genes = genes,
     xlim=c(104,108))


```

SNPs with matching 3:5 in the area.

```{r chr13_pc1_as_table}
#| warning: false
#| message: false
chr13_pc1_as$lod |> 
  as.data.frame( ) |> 
  rownames_to_column("snp_id") |> 
  left_join( chr13_pc1_as$snpinfo) |> 
  filter( PC1 > 6) |> 
  select( LOD = PC1,
          snp_id ,
          pos ,
          alleles, 
          consequence ,
          gene_id = ensembl_gene ,
          `129` = `129S1_SvImJ`,
          `AJ` = A_J,
          `CAST` = CAST_EiJ,
          `NZO` = NZO_HlLtJ,
          `PWK` = PWK_PhJ,
          `B6` = C57BL_6J,
          `NOD` = NOD_ShiLtJ,
          `WSB` = WSB_EiJ
          )  |> 
  filter( `129`==`B6`, B6==NOD , NOD==AJ, AJ==WSB &
            CAST == NZO, NZO == PWK) |> 
  left_join( all_genes_palate |> 
               select(gene_id, symbol) ,
             by = c("gene_id")) |> 
  mutate_if(is.numeric, round, 2) |> 
  create_dt()


```

:::


## Genetic mapping with limb bud stage

```{r map_lb_stage}
#| warning: false
#| message: false

lb_pheno <- sample_annot %>% 
  select(sample, LB_stage) %>% 
  column_to_rownames('sample') %>% 
  as.matrix()

lb_pheno_rankZ <- apply(lb_pheno, 2, rankZ)
lb_scan <- scan1( genoprobs = genoprobs, 
                  pheno = lb_pheno_rankZ, 
                  kinship = kinship_loco, 
                  addcovar = covar[,"sex",drop = FALSE])



```

```{r lb_stage_perm}
#| warning: false
#| message: false
#| cache: true

lb_perm <- scan1perm(genoprobs = genoprobs, 
                     pheno = lb_pheno_rankZ, 
                  kinship = kinship_loco, 
                  addcovar = covar[,"sex",drop = FALSE], n_perm = 1000
                  )
```

We identified a significant QTL on chromosome 13 and two suggestive QTL on chromosomes 1 and 2 for limb bud stage phenotype.
The QTL on chromosome 13 overlaps with the eQTL hotspot identified above and shares the same top candidate mediator *Slc30a5* which drops the LOD score of the QTL peak from 7.88 to 3.6.

::: panel-tabset
### LOD plot

```{r lb_lod_plot}
#| warning: false
#| message: false
#| fig-width: 14
#| fig-height: 4

thres <- summary(lb_perm, alpha = c(0.05, 0.1)) %>% 
  as_tibble( rownames = "alpha")

lb_peaks <- find_peaks(lb_scan, threshold = thres$LB_stage[2], pmap)

chroms <-names(chrom_lens)
chrom_segments <- tibble( start = 0, 
                          end = chrom_lens,
                          chr = chroms,
                          type = as.character(rep(c(0,1),10)))
chrom_segments$start <- chrom_segments$start+ chrom_lens_offset[chrom_segments$chr]
chrom_segments$end <- chrom_segments$end+ chrom_lens_offset[chrom_segments$chr]

lb_scan_df <- lb_scan %>% 
  as_tibble( rownames = "marker") %>% 
  left_join(map_dat2) 
lb_scan_df$pos_bp_offset <- lb_scan_df$pos_bp+chrom_lens_offset[lb_scan_df$chr]

ggplot()+
  geom_rect( data = chrom_segments, 
             aes( xmin =start, 
                  xmax = end, 
                  ymin = 0, 
                  ymax = 8, 
                  fill = type), 
             inherit.aes = FALSE, alpha = 0.2, show.legend = FALSE)+
  scale_fill_manual(values = c("dark gray","white"))+
  geom_line(data = lb_scan_df ,
            aes( x = pos_bp_offset, y = LB_stage),
            size = 1, 
            col =strain_colors[[3]],
             inherit.aes = FALSE )+
  theme_pubclean(base_size = 16)+
  scale_x_discrete( name = "Chr",
                    limits = chrom_lens_midpt, 
                    labels = names(chrom_lens), 
                    expand = expansion( mult = 0.02))+
  ylab("LOD")+
  geom_hline( yintercept = thres$LB_stage[1], col = "red", lty = 2)+
  geom_hline( yintercept = thres$LB_stage[2], col = "red", lty = 3)

```

### QTL on chromosome 1

```{r lb_peak_chr1}

peak_chr1 <- find_peaks( lb_scan, threshold = thres$LB_stage[2], pmap) %>% 
  filter(chr ==1)

peak_chr1_eff <- scan1blup( genoprobs = genoprobs[,"1"], 
                             pheno = lb_pheno, 
                             kinship = kinship_loco[["1"]], 
                             addcovar = covar[,"sex",drop = FALSE])

markers <- select(map_dat2, chrom, pos_bp) %>% dplyr::rename(start=pos_bp) %>%
  mutate(end=start) %>% GenomicRanges::GRanges()   # length 69,005
# Get the bounding markers for each QTL peak
# i.e. markers on the 69k grid that are up- and downstream of the peak
query <- peak_chr1 %>% dplyr::select(chr, pos) %>%
  dplyr::rename(chrom=chr, start=pos) %>% mutate(end=start) %>%
  GenomicRanges::GRanges()  # filter based on LOD
subject <- markers
peak_chr1$before <- map_dat2$marker[GenomicRanges::follow(query, subject)]
peak_chr1$after <- map_dat2$marker[GenomicRanges::precede(query, subject)]
peak_chr1_eff_sum <- colMeans(peak_chr1_eff[c(peak_chr1$before,peak_chr1$after), LETTERS[1:8]])
#plot_coefCC(peak_chr1_eff, map = pmap, scan1_output = lb_scan )

peak_chr1_lod_plot <- lb_scan_df %>% 
  filter( chr == 1) %>% 
  ggplot()+
  aes( 
    x= pos_bp/1e06,
    y = LB_stage
  )+
  geom_rect(  xmin =filter( bands.rna,chr==1)$start[1]/1e06, 
              xmax = filter( bands.rna,chr==1)$end[1]/1e06, 
              ymin = 0, 
              ymax = 25, 
              fill = "gray", 
              inherit.aes = FALSE, 
              alpha = 0.1, 
              show.legend = FALSE)+
  geom_line( size = 1.5, col =strain_colors[[3]],)+
  theme_pubclean( base_size = 18)+
  xlab(paste0("Chr 1 location (Mbp)"))+
  ylab( "LOD score")+
  ylim(0,8)+
  annotate( "text", x= 7+filter( bands.rna,chr==1)$end[1]/1e06, y = 7.5, label ="eQTL \n Hotspot", size =5)

peak_chr1_eff_plot <- peak_chr1_eff_sum %>%
  as_tibble(rownames = "effect") %>% 
  mutate( type = "LB_stage") %>% 
  mutate( effect = case_when( effect == "A" ~ "AJ",
                              effect == "B" ~ "B6",
                              effect == "C" ~ "129",
                              effect == "D" ~ "NOD",
                              effect == "E" ~ "NZO",
                              effect == "F" ~ "CAST",
                              effect == "G" ~ "PWK",
                              effect == "H" ~ "WSB")) %>% 
  ggplot()+
  aes( x = effect,
       y = value,
       group = type)+
  geom_point(size = 4, show.legend = FALSE, col =strain_colors[[3]],)+
  geom_line(show.legend = T, size = 1.2, col =strain_colors[[3]],)+
  theme_pubclean(base_size = 18)+
  ylab("Haplotype effects")+
  xlab("")+
  #ylim(-2,1.1)+
  geom_hline( yintercept = 0)+
  theme(axis.line.x = element_blank(),
        axis.title = element_text(size = 18))+
  coord_flip( clip ="off")+
  theme(legend.position = "none")

```

```{r lb_peak1_plot}
#| fig-width: 12
#| fig-height: 5
#| message: false
#| warning: false


peak1_plot<- ggarrange( peak_chr1_lod_plot, peak_chr1_eff_plot, widths = c(1, 0.5))
peak1_plot

```

### Mediation results for Chr 1 peak

```{r chr1_lb_mediation}
#| warning: false
#| message: false
#| results: hide


# mediate with RNA data
peak1_marker <- map_dat2 %>%  filter( pos_bp == peak_chr1$pos)
qtl_geno <- pull_genoprobpos(genoprobs, peak1_marker$marker)

peak1_meds <- mediation.scan( target =as.matrix(lb_pheno),
                               mediator = exprZ[rownames(lb_pheno),all_genes_palate$gene_id,drop=F], 
                               annotation =  all_genes_palate %>%
                                 mutate(chr=chromosome,pos=abs(end+start)/2),
                               qtl.geno = qtl_geno[rownames(lb_pheno),],
                               covar = covar[rownames(lb_pheno),"sex",drop=FALSE])
```

```{r chr1_meds_table}

peak1_meds %>% 
  mutate( qtl_pos = peak_chr1$pos, qtl_chr = peak_chr1$chr, qtl_lod = peak_chr1$lod) %>% 
  mutate( scaled_LOD = scale(LOD)) %>% 
  filter( abs(qtl_pos-midpoint) <= 10e6 &   # filter within 10Mb
            qtl_chr == chr
  ) %>% 
  arrange( LOD) %>% 
  head(10) %>% 
  arrange(midpoint) %>% 
  select( symbol, chr, qtl_lod, mediation_lod = LOD, qtl_pos, pos) %>% 
  mutate_if( is.numeric, round, 2) %>% 
  create_dt()

```

### QTL on chromosome 2

```{r lb_peak_chr2}

peak_chr2 <- find_peaks( lb_scan, threshold = thres$LB_stage[2], pmap) %>% 
  filter( chr ==2)

peak_chr2_eff <- scan1blup( genoprobs = genoprobs[,"2"], 
                             pheno = lb_pheno, 
                             kinship = kinship_loco[["2"]], 
                             addcovar = covar[,"sex",drop = FALSE])

markers <- select(map_dat2, chrom, pos_bp) %>% dplyr::rename(start=pos_bp) %>%
  mutate(end=start) %>% GenomicRanges::GRanges()   # length 69,005
# Get the bounding markers for each QTL peak
# i.e. markers on the 69k grid that are up- and downstream of the peak
query <- peak_chr2 %>% dplyr::select(chr, pos) %>%
  dplyr::rename(chrom=chr, start=pos) %>% mutate(end=start) %>%
  GenomicRanges::GRanges()  # filter based on LOD
subject <- markers
peak_chr2$before <- map_dat2$marker[GenomicRanges::follow(query, subject)]
peak_chr2$after <- map_dat2$marker[GenomicRanges::precede(query, subject)]
peak_chr2_eff_sum <- colMeans(peak_chr2_eff[c(peak_chr2$before,peak_chr2$after), LETTERS[1:8]])
#plot_coefCC(peak_chr2_eff, map = pmap, scan1_output = lb_scan )

peak_chr2_lod_plot <- lb_scan_df %>% 
  filter( chr == 2) %>% 
  ggplot()+
    aes( 
      x= pos_bp/1e06,
      y = LB_stage
      )+
    geom_rect(  xmin =filter( bands.rna,chr==2)$start[1]/1e06, 
              xmax = filter( bands.rna,chr==2)$end[1]/1e06, 
              ymin = 0, 
              ymax = 25, 
              fill = "gray", 
             inherit.aes = FALSE, 
             alpha = 0.1, 
             show.legend = FALSE)+
    geom_line( size = 1.5, col =strain_colors[[3]],)+
    theme_pubclean( base_size = 18)+
  xlab(paste0("Chr 2 location (Mbp)"))+
  ylab( "LOD score")+
  ylim(0,10)+
  annotate( "text", x= 7+filter( bands.rna,chr==2)$end[1]/1e06, y = 9.5, label ="eQTL \n Hotspot", size =5)

peak_chr2_eff_plot <- peak_chr2_eff_sum %>%
  as_tibble(rownames = "effect") %>% 
  mutate( type = "LB_stage") %>% 
  mutate( effect = case_when( effect == "A" ~ "AJ",
                              effect == "B" ~ "B6",
                              effect == "C" ~ "129",
                              effect == "D" ~ "NOD",
                              effect == "E" ~ "NZO",
                              effect == "F" ~ "CAST",
                              effect == "G" ~ "PWK",
                              effect == "H" ~ "WSB")) %>% 
  ggplot()+
  aes( x = effect,
       y = value,
       group = type)+
  geom_point(size = 4, show.legend = FALSE, col =strain_colors[[3]],)+
  geom_line(show.legend = T, size = 1.2, col =strain_colors[[3]],)+
  theme_pubclean(base_size = 18)+
  ylab("Haplotype effects")+
  xlab("")+
  #ylim(-2,1.1)+
  geom_hline( yintercept = 0)+
  theme(axis.line.x = element_blank(),
        axis.title = element_text(size = 18))+
  coord_flip( clip ="off")+
  theme(legend.position = "none")

```

```{r lb_peak2_plot}
#| fig-width: 12
#| fig-height: 5
#| message: false
#| warning: false


peak2_plot<- ggarrange( peak_chr2_lod_plot, peak_chr2_eff_plot, widths = c(1, 0.5))
peak2_plot

```

### Mediation results for Chr 2 peak

```{r chr2_lb_mediation}
#| warning: false
#| message: false
#| results: hide


# mediate with RNA data
peak2_marker <- map_dat2 %>%  filter( pos_bp == peak_chr2$pos)
qtl_geno <- pull_genoprobpos(genoprobs, peak2_marker$marker)

peak2_meds <- mediation.scan( target =as.matrix(lb_pheno),
                               mediator = exprZ[rownames(lb_pheno),all_genes_palate$gene_id,drop=F], 
                               annotation =  all_genes_palate %>%
                                 mutate(chr=chromosome,pos=abs(end+start)/2),
                               qtl.geno = qtl_geno[rownames(lb_pheno),],
                               covar = covar[rownames(lb_pheno),"sex",drop=FALSE])

```

```{r chr2_meds_table}

peak2_meds %>% 
  mutate( qtl_pos = peak_chr2$pos, qtl_chr = peak_chr2$chr, qtl_lod = peak_chr2$lod) %>% 
  mutate( scaled_LOD = scale(LOD)) %>% 
  filter( abs(qtl_pos-midpoint) <= 10e6 &   # filter within 10Mb
            qtl_chr == chr
  ) %>% 
  arrange( LOD) %>% 
  head(5) %>% 
  arrange(midpoint) %>% 
  select( symbol, chr, qtl_lod, mediation_lod = LOD, qtl_pos, pos) %>% 
  mutate_if( is.numeric, round, 2) %>% 
  create_dt()
  
```

### QTL on chromosome 13

```{r lb_peak_chr13}
#| warning: false
#| message: false
peak_chr13 <- find_peaks( lb_scan, threshold = thres$LB_stage[1], pmap)

peak_chr13_eff <- scan1blup( genoprobs = genoprobs[,"13"], 
                             pheno = lb_pheno, 
                             kinship = kinship_loco[["13"]], 
                             addcovar = covar[,"sex",drop = FALSE])

markers <- select(map_dat2, chrom, pos_bp) %>% dplyr::rename(start=pos_bp) %>%
  mutate(end=start) %>% GenomicRanges::GRanges()   # length 69,005
# Get the bounding markers for each QTL peak
# i.e. markers on the 69k grid that are up- and downstream of the peak
query <- peak_chr13 %>% dplyr::select(chr, pos) %>%
  dplyr::rename(chrom=chr, start=pos) %>% mutate(end=start) %>%
  GenomicRanges::GRanges()  # filter based on LOD
subject <- markers
peak_chr13$before <- map_dat2$marker[GenomicRanges::follow(query, subject)]
peak_chr13$after <- map_dat2$marker[GenomicRanges::precede(query, subject)]
peak_chr13_eff_sum <- colMeans(peak_chr13_eff[c(peak_chr13$before,peak_chr13$after), LETTERS[1:8]])
# plot_coefCC(peak_chr13_eff, map = pmap, scan1_output = lb_scan , xlim=c(1e08,1.2e08))
# abline(v =  107294179, col = "red", lwd=2, lty=2)
# abline(v =  107379301, col = "blue", lwd=2, lty=2)

peak_chr13_lod_plot <- lb_scan_df %>% 
  filter( chr == 13) %>% 
  ggplot()+
    aes( 
      x= pos_bp/1e06,
      y = LB_stage
      )+
    geom_rect(  xmin =filter( bands.rna,chr==13)$start[1]/1e06, 
              xmax = filter( bands.rna,chr==13)$end[1]/1e06, 
              ymin = 0, 
              ymax = 25, 
              fill = "gray", 
             inherit.aes = FALSE, 
             alpha = 0.1, 
             show.legend = FALSE)+
    geom_line( size = 1.5, col =strain_colors[[3]],)+
    theme_pubclean( base_size = 18)+
  xlab(paste0("Chr 13 location (Mbp)"))+
  ylab( "LOD score")+
  ylim(0,10)+
  annotate( "text", x= 7+filter( bands.rna,chr==13)$end[1]/1e06, y = 9.5, label ="eQTL \n Hotspot", size =5)

peak_chr13_eff_plot <- peak_chr13_eff_sum %>%
  as_tibble(rownames = "effect") %>% 
  mutate( type = "LB_stage") %>% 
  mutate( effect = case_when( effect == "A" ~ "AJ",
                              effect == "B" ~ "B6",
                              effect == "C" ~ "129",
                              effect == "D" ~ "NOD",
                              effect == "E" ~ "NZO",
                              effect == "F" ~ "CAST",
                              effect == "G" ~ "PWK",
                              effect == "H" ~ "WSB")) %>% 
  ggplot()+
  aes( x = effect,
       y = value,
       group = type)+
  geom_point(size = 4, show.legend = FALSE, col =strain_colors[[3]],)+
  geom_line(show.legend = T, size = 1.2, col =strain_colors[[3]],)+
  theme_pubclean(base_size = 18)+
  ylab("Haplotype effects")+
  xlab("")+
  #ylim(-2,1.1)+
  geom_hline( yintercept = 0)+
  theme(axis.line.x = element_blank(),
        axis.title = element_text(size = 18))+
  coord_flip( clip ="off")+
  theme(legend.position = "none")


```

```{r lb_peak13_plot}
#| fig-width: 12
#| fig-height: 5
#| message: false
#| warning: false


peak13_plot<- ggarrange( peak_chr13_lod_plot, peak_chr13_eff_plot, widths = c(1, 0.5))
peak13_plot

```


Below in blue are the boundaries of the eQTL hotspot, LB stage QTL peak in black and the QTL peak from Chr13 targets PC1 in red Note that I am calling genotypes of the samples based on the PC1 QTL peak location. 
```{r chr13_lb_stage_eff_plot}
#| warning: false
#| message: false
#| #| fig-width: 12
#| fig-height: 8
plot_coefCC( peak_chr13_eff, pmap, scan1_output = lb_scan, xlim= c(1e08, 1.1e08))
abline( v =peak_chr13$pos, col = "black", lwd = 2, lty = 2)
abline( v =chr13_pc1_peak$pos, col = "red", lwd = 2, lty = 2)
abline( v = filter( bands.rna,chr==13)$start[1], col = "blue", lwd = 2)
abline( v =filter( bands.rna,chr==13)$end[1], col = "blue", lwd = 2)

```

Association mapping:

```{r lb_stage_peak13_as}
#| warning: false
#| message: false
pmap_Mbp <- lapply( pmap, function(x){x/1e06})
attr(genoprobs, "is_x_chr") <- NULL

lb_stage_peak13_as <- scan1snps(genoprobs = genoprobs,
                     map = pmap_Mbp,
                     pheno = lb_pheno_rankZ,
                     kinship = kinship_loco[[peak_chr13$chr]],
                     addcovar = covar,
                     chr = as.character(peak_chr13$chr),
                     query_func = query_variants,
                     start = peak_chr13$pos/1e06 - 5,
                     end = peak_chr13$pos/1e06 + 5,
                     keep_all_snps = T
                     )
genes <- query_genes( peak_chr13$chr,
                      peak_chr13$pos/1e06 - 5,
                      peak_chr13$pos/1e06 + 5) %>%
  distinct()

```

```{r lb_stage_peak13_as_plot}
#| warning: false
#| message: false
#| fig-width: 16
#| fig-height: 8

par(mar=c(4.1, 4.1,2, 1))

plot(lb_stage_peak13_as$lod,
     lb_stage_peak13_as$snpinfo,
     drop_hilit = 1)


```

SNPs with LOD scores > 4:

```{r lb_stage_peak13_as_table}
#| warning: false
#| message: false
lb_stage_peak13_as$lod |> 
  as.data.frame( ) |> 
  rownames_to_column("snp_id") |> 
  left_join( lb_stage_peak13_as$snpinfo) |> 
  filter( LB_stage > 4) |> 
  select( LOD = LB_stage,
          snp_id ,
          pos ,
          alleles, 
          consequence ,
          gene_id = ensembl_gene ,
          `129` = `129S1_SvImJ`,
          `AJ` = A_J,
          `CAST` = CAST_EiJ,
          `NZO` = NZO_HlLtJ,
          `PWK` = PWK_PhJ,
          `B6` = C57BL_6J,
          `NOD` = NOD_ShiLtJ,
          `WSB` = WSB_EiJ
          )  |> 
  # filter( `129`==`B6`, B6==NOD , NOD==AJ, AJ==WSB &
  #           CAST == NZO, NZO == PWK) |> 
  left_join( all_genes_palate |> 
               select(gene_id, symbol) ,
             by = c("gene_id")) |> 
  mutate_if(is.numeric, round, 2) |> 
  create_dt()

```

```{r chr13_lb_stage_bygeno}
#| warning: false
#| message: false
# call the geno at the lb stage peak -- getting too many NAs! Looks like GBRS can't call some of the markers with high confidence so it ends up giving 30% probability to three founders! 
# # the split is: CAST, NZO, PWK vs WSB, B6, NOD, 129, AJ
# closest_geno <- function(p, tol = 0.01) { 
#   if (sum(abs(p - c(1, 0))) < tol) {
#     return("A")
#   }
#   if (sum(abs(p - c(0, 1))) < tol) {
#     return("B")
#   }
#   if (sum(abs(p - c(0.5, 0.5))) < tol) {
#     return("H")
#   }
#   return(NA)
# }
# call_geno_chr13 <- function(mat) {
#   # mat is nsamp*8 (haps)
#   # A = A_J
#   # B = B6
#   # C = 129
#   # D = NOD
#   # E = NZO
#   # F = CAST
#   # G = PWK
#   # H = WSB
#   # the split is: CAST, NZO, PWK vs WSB, B6, NOD, 129, AJ
#   grp <- c("A", "A", "A", "A", "B", "B", "B", "A")
#   collapsed <- apply(mat, 1, function(x) tapply(x, grp, sum))
#   apply(collapsed, 2, closest_geno, tol = 0.05) # relaxing the tol to get genotype calls for all samples.
# }
# # PC1 qtl on chr13
# probs <- genoprobs
# markers <- tibble(name = dimnames(probs[[13]])[[3]]) %>%
#   mutate(name2 = name) %>%
#   separate(name2, into = c("chrom", "pos"), sep = "_", convert = TRUE)
# 
# mm <- filter(markers, chrom == peak_chr13$chr, 
#              between(pos, peak_chr13$pos-.05e06,peak_chr13$pos+.05e06)
#              )# 3 markers
# probs_at_chr13 <- probs$`13`[, , mm$name]
# geno_at_chr13 <- apply(probs_at_chr13, 3, call_geno_chr13)
# # assert_that(noNA(probs3))
# one <- geno_at_chr13[, 1] # marker left of peak
# two <- geno_at_chr13[, 2] # closest marker to peak
# three <- geno_at_chr13[, 3] # marker right of peak
# 
# # Get samples in group A (alt allele) and group B (ref allele)
# alts <- rownames(probs[[13]])[one == "A" & two == "A" & three == "A"]
# refs <- rownames(probs[[13]])[one == "B" & two == "B" & three == "B"]
# hets <- rownames(probs[[13]])[one == "H" & two == "H" & three == "H"]
# 
# geno_at_chr13_tb <- tibble(
#   chr13_geno = factor(
#     c(rep("Ref",length(refs)), 
#       rep("Alt",length(alts)),
#       rep("Het",length(hets)))
#     ),
#   geno =  c(rep(0,length(refs)), 
#       rep(1,length(alts)),
#       rep(2,length(hets)))
# ,
#   sampleid = c(refs, alts, hets)
#     )



# Note that the chr13 eQTL hotspot pc1 peak is at 105158020 and LBstage peak is at 107342710
# I am using the genotypes called at that locus!
lb_pheno |> 
  as_tibble(rownames = "sampleid") |> 
  left_join(geno_at_chr13_tb) |> 
  left_join( sample_annot |> select(sampleid=sample, LB_stage)) |> 
  mutate( label = case_when(
    chr13_geno =="Alt"~"CAST group",
    chr13_geno =="Ref"~"B6 group",
    chr13_geno =="Het"~"Het"
  ),
  label = factor(label, levels = c("CAST group","Het","B6 group"))
  ) |> 
   ggplot()+
  aes(
    x = label,
    y = LB_stage,
    shape = label,
    col = LB_stage,
    fill=LB_stage,
    group = label
  )+
  geom_boxplot(width = 0.2, outlier.shape = NA)+
  geom_jitter(size = 3, alpha = 0.7)+
  #ylim(-3,3)+
  scale_color_viridis_c(direction = -1)+
  scale_fill_viridis_c(direction = -1)+
  theme_pubclean()+
  xlab("Genotype at Chr 13 locus")+
  ylab("LB stage")+
  stat_compare_means( inherit.aes = F, aes(group = label) ,comparisons = list(c("CAST group","Het"),
                                      c("Het","B6 group"),
                                      c("CAST group","B6 group")))+
  scale_shape_manual(values = c(21,22,23))+
  guides( color= "none",shape = "none")


```

### Mediation results for Chr 13 peak

```{r chr13_lb_mediation}
#| warning: false
#| message: false
#| results: hide


# mediate with RNA data
peak13_marker <- map_dat2 %>%  filter( pos_bp == peak_chr13$pos)
qtl_geno <- pull_genoprobpos(genoprobs, peak13_marker$marker)

peak13_meds <- mediation.scan( target =as.matrix(lb_pheno),
                               mediator = exprZ[rownames(lb_pheno),all_genes_palate$gene_id,drop=F], 
                               annotation =  all_genes_palate %>%
                                 mutate(chr=chromosome,pos=abs(end+start)/2),
                               qtl.geno = qtl_geno[rownames(lb_pheno),],
                               covar = covar[rownames(lb_pheno),"sex",drop=FALSE])
```

```{r chr13_meds_table}
#| warning: false
#| message: false
peak13_meds %>% 
  mutate( qtl_pos = peak_chr13$pos, qtl_chr = peak_chr13$chr, qtl_lod = peak_chr13$lod) %>% 
  mutate( scaled_LOD = scale(LOD)) %>% 
  filter( abs(qtl_pos-midpoint) <= 10e6 &   # filter within 10Mb
            qtl_chr == chr
  ) %>% 
  arrange( LOD) %>% 
  head(5) %>% 
  arrange(midpoint) %>% 
  select( symbol, chr, qtl_lod, mediation_lod = LOD, qtl_pos, pos) %>% 
  mutate_if( is.numeric, round, 2) %>% 
  create_dt()
  
```
:::

## Genetic mapping with pinky nub

```{r map_pn}
#| warning: false
#| message: false
#| fig-width: 12
#| fig-height: 6

pn_pheno <- sample_annot %>% 
  select(sample, pinky_nub) %>% 
  mutate( pn = case_when( is.na(pinky_nub)~0,
                          pinky_nub =="pn"~1) ) %>% 
  select(sample, pn) %>% 
  column_to_rownames('sample') %>% 
  as.matrix()

pn_scan <- scan1( genoprobs = genoprobs, 
                  pheno = pn_pheno[,"pn",drop=FALSE], 
                  #kinship = kinship_loco, 
                  addcovar = covar[,"sex",drop = FALSE],
                  model = "binary")


#plot(pn_scan, pmap)

```

```{r pn_perm}
#| warning: false
#| message: false
#| cache: true

pn_perm <- scan1perm(genoprobs = genoprobs, 
                     pheno = pn_pheno[,"pn",drop=FALSE],
                     #kinship = kinship_loco, 
                     addcovar = covar[,"sex",drop = FALSE], 
                     n_perm = 1000,
                     model = "binary"
                  )
```

::: panel-tabset
### LOD plot

```{r pn_lod_plot}
#| warning: false
#| message: false
#| fig-width: 14
#| fig-height: 4

thres <- summary(pn_perm, alpha = c(0.05, 0.1)) %>% 
  as_tibble( rownames = "alpha")

pn_peaks <- find_peaks(pn_scan, threshold = thres$pn[2], pmap)

chroms <-names(chrom_lens)
chrom_segments <- tibble( start = 0, 
                          end = chrom_lens,
                          chr = chroms,
                          type = as.character(rep(c(0,1),10)))
chrom_segments$start <- chrom_segments$start+ chrom_lens_offset[chrom_segments$chr]
chrom_segments$end <- chrom_segments$end+ chrom_lens_offset[chrom_segments$chr]

pn_scan_df <- pn_scan %>% 
  as_tibble( rownames = "marker") %>% 
  left_join(map_dat2) 
pn_scan_df$pos_bp_offset <- pn_scan_df$pos_bp+chrom_lens_offset[pn_scan_df$chr]

ggplot()+
  geom_rect( data = chrom_segments, 
             aes( xmin =start, 
                  xmax = end, 
                  ymin = 0, 
                  ymax = 10, 
                  fill = type), 
             inherit.aes = FALSE, alpha = 0.2, show.legend = FALSE)+
  scale_fill_manual(values = c("dark gray","white"))+
  geom_line(data = pn_scan_df ,
            aes( x = pos_bp_offset, y = pn),
            size = 1, 
            col =strain_colors[[3]],
             inherit.aes = FALSE )+
  theme_pubclean(base_size = 16)+
  scale_x_discrete( name = "Chr",
                    limits = chrom_lens_midpt, 
                    labels = names(chrom_lens), 
                    expand = expansion( mult = 0.02))+
  ylab("LOD")+
  ylim(0,10)+
  geom_hline( yintercept = thres$pn[1], col = "red", lty = 2)+
  geom_hline( yintercept = thres$pn[2], col = "red", lty = 3)

```

### QTL on chromosome 15

```{r pn_peak_chr15}

peak_chr15 <- find_peaks( pn_scan, threshold = thres$pn[2], pmap)

peak_chr15_eff <- scan1blup( genoprobs = genoprobs[,"15"], 
                             pheno = pn_pheno, 
                             kinship = kinship_loco[["15"]], 
                             addcovar = covar[,"sex",drop = FALSE])

markers <- select(map_dat2, chrom, pos_bp) %>% dplyr::rename(start=pos_bp) %>%
  mutate(end=start) %>% GenomicRanges::GRanges()   # length 69,005
# Get the bounding markers for each QTL peak
# i.e. markers on the 69k grid that are up- and downstream of the peak
query <- peak_chr15 %>% dplyr::select(chr, pos) %>%
  dplyr::rename(chrom=chr, start=pos) %>% mutate(end=start) %>%
  GenomicRanges::GRanges()  # filter based on LOD
subject <- markers
peak_chr15$before <- map_dat2$marker[GenomicRanges::follow(query, subject)]
peak_chr15$after <- map_dat2$marker[GenomicRanges::precede(query, subject)]
peak_chr15_eff_sum <- colMeans(peak_chr15_eff[c(peak_chr15$before,peak_chr15$after), LETTERS[1:8]])
#plot_coefCC(peak_chr15_eff, map = pmap, scan1_output = pn_scan )

peak_chr15_lod_plot <- pn_scan_df %>% 
  filter( chr == 15) %>% 
  ggplot()+
  aes( 
    x= pos_bp/1e06,
    y = pn
  )+
  geom_line( size = 1.5, col =strain_colors[[3]],)+
  theme_pubclean( base_size = 18)+
  xlab(paste0("Chr 15 location (Mbp)"))+
  ylab( "LOD score")

peak_chr15_eff_plot <- peak_chr15_eff_sum %>%
  as_tibble(rownames = "effect") %>% 
  mutate( type = "pn") %>% 
  mutate( effect = case_when( effect == "A" ~ "AJ",
                              effect == "B" ~ "B6",
                              effect == "C" ~ "129",
                              effect == "D" ~ "NOD",
                              effect == "E" ~ "NZO",
                              effect == "F" ~ "CAST",
                              effect == "G" ~ "PWK",
                              effect == "H" ~ "WSB")) %>% 
  ggplot()+
  aes( x = effect,
       y = value,
       group = type)+
  geom_point(size = 4, show.legend = FALSE, col =strain_colors[[3]],)+
  geom_line(show.legend = T, size = 1.2, col =strain_colors[[3]],)+
  theme_pubclean(base_size = 18)+
  ylab("Haplotype effects")+
  xlab("")+
  #ylim(-2,1.1)+
  geom_hline( yintercept = 0)+
  theme(axis.line.x = element_blank(),
        axis.title = element_text(size = 18))+
  coord_flip( clip ="off")+
  theme(legend.position = "none")

```

```{r pn_peak15_plot}
#| fig-width: 12
#| fig-height: 5
#| message: false
#| warning: false


peak15_plot<- ggarrange( peak_chr15_lod_plot, peak_chr15_eff_plot, widths = c(1, 0.5))
peak15_plot

```

### Mediation results for Chr15 peak

```{r chr15_pn_mediation}
#| warning: false
#| message: false
#| results: hide

# mediate with RNA data
peak15_marker <- map_dat2 %>%  filter( pos_bp == peak_chr15$pos)
qtl_geno <- pull_genoprobpos(genoprobs, peak15_marker$marker)

peak15_meds <- mediation.scan( target =as.matrix(pn_pheno),
                               mediator = exprZ[rownames(pn_pheno),all_genes_palate$gene_id,drop=F], 
                               annotation =  all_genes_palate %>%
                                 mutate(chr=chromosome,pos=abs(end+start)/2),
                               qtl.geno = qtl_geno[rownames(pn_pheno),],
                               covar = covar[rownames(pn_pheno),"sex",drop=FALSE])

```

```{r chr15_pn_meds_table}

peak15_meds %>% 
  mutate( qtl_pos = peak_chr15$pos, qtl_chr = peak_chr15$chr, qtl_lod = peak_chr15$lod) %>% 
  mutate( scaled_LOD = scale(LOD)) %>% 
  filter( abs(qtl_pos-midpoint) <= 10e6 &   # filter within 10Mb
            qtl_chr == chr
  ) %>% 
  arrange( LOD) %>% 
  head(5) %>% 
  arrange(midpoint) %>% 
  select( symbol, chr, qtl_lod, mediation_lod = LOD, qtl_pos, pos) %>% 
  mutate_if( is.numeric, round, 2) %>% 
  create_dt()

```

### Top candidate mediators

```{r chr15_med_dets}
#| eval: true
#| message: false
#| warning: false

peak15_meds_ranked <- peak15_meds %>% 
  mutate( qtl_pos = peak_chr15$pos, qtl_chr = peak_chr15$chr, qtl_lod = peak_chr15$lod) %>% 
  mutate( scaled_LOD = scale(LOD)) %>% 
  filter( abs(qtl_pos-midpoint) <= 10e6 &   # filter within 10Mb
            qtl_chr == chr
  ) %>% 
  arrange( LOD)


candidate_peaks_chr15 <- peaks_annotated %>% 
  filter( symbol %in% peak15_meds_ranked$symbol[1:10], local ==T)

# add lod + effect plots of the local eQTL peaks for the top candidate mediators
# the effects are already there but need to run the qtl scan for the lod plot

```

```{r}
#| eval: false

require(openxlsx)
list_of_datasets <- list("chr1" = chr1.eQTL1, 
                         "chr2" = chr2.eQTL1,
                         "chr4" = chr4.eQTL1,
                         "chr8" = chr8.eQTL1,
                         "chr13" = chr13.eQTL1)
write.xlsx(list_of_datasets, file = here("_data","DO_palate_eQTL_hotspots_09062023.xlsx"))

```

:::

::: 
